{"meta":{"title":"YHHBlog","subtitle":"断剑重铸之日，其势归来之时","description":null,"author":"游来游去","url":"http://youhanghang.com"},"pages":[{"title":"分类","date":"2017-11-10T16:00:00.000Z","updated":"2018-03-22T02:33:02.000Z","comments":false,"path":"categories/index.html","permalink":"http://youhanghang.com/categories/index.html","excerpt":"","text":""},{"title":"标签云","date":"2017-11-11T06:59:32.000Z","updated":"2017-11-11T07:01:46.000Z","comments":false,"path":"tags/index.html","permalink":"http://youhanghang.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"js表单验证大全","slug":"表单验证","date":"2018-10-29T09:00:13.170Z","updated":"2017-10-15T07:26:26.000Z","comments":true,"path":"2018/10/29/表单验证/","link":"","permalink":"http://youhanghang.com/2018/10/29/表单验证/","excerpt":"","text":"js表单验证大全表单验证[标题] [] [url] [link text]// 用途：校验ip地址的格式 // 输入：strIP：ip地址 // 返回：如果通过验证返回true,否则返回false； function isIP(strIP) &#123; if (isNull(strIP)) return false; var re = /^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/g //匹配IP地址的正则表达式 if (re.test(strIP)) &#123; if (RegExp.$1 &lt; 256 &amp;&amp; RegExp.$2 &lt; 256 &amp;&amp; RegExp.$3 &lt; 256 &amp;&amp; RegExp.$4 &lt; 256) return true; &#125; return false;&#125;/* 用途：检查输入字符串是否为空或者全部都是空格 输入：str 返回： 如果全是空返回true,否则返回false */function isNull(str) &#123; if (str == \"\") return true; var regu = \"^[ ]+$\"; var re = new RegExp(regu); return re.test(str);&#125;/* 用途：检查输入对象的值是否符合整数格式 输入：str 输入的字符串 返回：如果通过验证返回true,否则返回false */function isInteger(str) &#123; var regu = /^[-]&#123;0,1&#125;[0-9]&#123;1,&#125;$/; return regu.test(str);&#125;/* 用途：检查输入手机号码是否正确 输入： s：字符串 返回： 如果通过验证返回true,否则返回false */function checkMobile(s) &#123; var regu = /^[1][3][0-9]&#123;9&#125;$/; var re = new RegExp(regu); if (re.test(s)) &#123; return true; &#125; else &#123; return false; &#125;&#125;/* 用途：检查输入字符串是否符合正整数格式 输入： s：字符串 返回： 如果通过验证返回true,否则返回false */function isNumber(s) &#123; var regu = \"^[0-9]+$\"; var re = new RegExp(regu); if (s.search(re) != -1) &#123; return true; &#125; else &#123; return false; &#125;&#125;/* 用途：检查输入字符串是否是带小数的数字格式,可以是负数 输入： s：字符串 返回： 如果通过验证返回true,否则返回false */function isDecimal(str) &#123; if (isInteger(str)) return true; var re = /^[-]&#123;0,1&#125;(\\d+)[\\.]+(\\d+)$/; if (re.test(str)) &#123; if (RegExp.$1 == 0 &amp;&amp; RegExp.$2 == 0) return false; return true; &#125; else &#123; return false; &#125;&#125;/* 用途：检查输入对象的值是否符合端口号格式 输入：str 输入的字符串 返回：如果通过验证返回true,否则返回false */function isPort(str) &#123; return (isNumber(str) &amp;&amp; str &lt; 65536);&#125;/* 用途：检查输入对象的值是否符合E-Mail格式 输入：str 输入的字符串 返回：如果通过验证返回true,否则返回false */function isEmail(str) &#123; var myReg = /^[-_A-Za-z0-9]+@([_A-Za-z0-9]+\\.)+[A-Za-z0-9]&#123;2,3&#125;$/; if (myReg.test(str)) return true; return false;&#125;/* 用途：检查输入字符串是否符合金额格式 格式定义为带小数的正数，小数点后最多三位 输入： s：字符串 返回： 如果通过验证返回true,否则返回false */function isMoney(s) &#123; var regu = \"^[0-9]+[\\.][0-9]&#123;0,3&#125;$\"; var re = new RegExp(regu); if (re.test(s)) &#123; return true; &#125; else &#123; return false; &#125;&#125;/* 用途：检查输入字符串是否只由英文字母和数字和下划线组成 输入： s：字符串 返回： 如果通过验证返回true,否则返回false */function isNumberOr_Letter(s) &#123; //判断是否是数字或字母 var regu = \"^[0-9a-zA-Z\\_]+$\"; var re = new RegExp(regu); if (re.test(s)) &#123; return true; &#125; else &#123; return false; &#125;&#125;/* 用途：检查输入字符串是否只由英文字母和数字组成 输入： s：字符串 返回： 如果通过验证返回true,否则返回false */function isNumberOrLetter(s) &#123; //判断是否是数字或字母 var regu = \"^[0-9a-zA-Z]+$\"; var re = new RegExp(regu); if (re.test(s)) &#123; return true; &#125; else &#123; return false; &#125;&#125;/* 用途：检查输入字符串是否只由汉字、字母、数字组成 输入： value：字符串 返回： 如果通过验证返回true,否则返回false */function isChinaOrNumbOrLett(s) &#123; //判断是否是汉字、字母、数字组成 var regu = \"^[0-9a-zA-Z\\u4e00-\\u9fa5]+$\"; var re = new RegExp(regu); if (re.test(s)) &#123; return true; &#125; else &#123; return false; &#125;&#125;/* 用途：判断是否是日期 输入：date：日期；fmt：日期格式 返回：如果通过验证返回true,否则返回false */function isDate(date, fmt) &#123; if (fmt == null) fmt = \"yyyyMMdd\"; var yIndex = fmt.indexOf(\"yyyy\"); if (yIndex == -1) return false; var year = date.substring(yIndex, yIndex + 4); var mIndex = fmt.indexOf(\"MM\"); if (mIndex == -1) return false; var month = date.substring(mIndex, mIndex + 2); var dIndex = fmt.indexOf(\"dd\"); if (dIndex == -1) return false; var day = date.substring(dIndex, dIndex + 2); if (!isNumber(year) || year &gt; \"2100\" || year &lt; \"1900\") return false; if (!isNumber(month) || month &gt; \"12\" || month &lt; \"01\") return false; if (day &gt; getMaxDay(year, month) || day &lt; \"01\") return false; return true;&#125;function getMaxDay(year, month) &#123; if (month == 4 || month == 6 || month == 9 || month == 11) return \"30\"; if (month == 2) if (year % 4 == 0 &amp;&amp; year % 100 != 0 || year % 400 == 0) return \"29\"; else return \"28\"; return \"31\";&#125;/* 用途：字符1是否以字符串2结束 输入：str1：字符串；str2：被包含的字符串 返回：如果通过验证返回true,否则返回false */function isLastMatch(str1, str2) &#123; var index = str1.lastIndexOf(str2); if (str1.length == index + str2.length) return true; return false;&#125;/* 用途：字符1是否以字符串2开始 输入：str1：字符串；str2：被包含的字符串 返回：如果通过验证返回true,否则返回false */function isFirstMatch(str1, str2) &#123; var index = str1.indexOf(str2); if (index == 0) return true; return false;&#125;/* 用途：字符1是包含字符串2 输入：str1：字符串；str2：被包含的字符串 返回：如果通过验证返回true,否则返回false */function isMatch(str1, str2) &#123; var index = str1.indexOf(str2); if (index == -1) return false; return true;&#125;/* 用途：检查输入的起止日期是否正确，规则为两个日期的格式正确， 且结束如期&gt;=起始日期 输入： startDate：起始日期，字符串 endDate：结束如期，字符串 返回： 如果通过验证返回true,否则返回false */function checkTwoDate(startDate, endDate) &#123; if (!isDate(startDate)) &#123; alert(\"起始日期不正确!\"); return false; &#125; else if (!isDate(endDate)) &#123; alert(\"终止日期不正确!\"); return false; &#125; else if (startDate &gt; endDate) &#123; alert(\"起始日期不能大于终止日期!\"); return false; &#125; return true;&#125;/* 用途：检查输入的Email信箱格式是否正确 输入： strEmail：字符串 返回： 如果通过验证返回true,否则返回false */function checkEmail(strEmail) &#123; //var emailReg = /^[_a-z0-9]+@([_a-z0-9]+\\.)+[a-z0-9]&#123;2,3&#125;$/; var emailReg = /^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/; if (emailReg.test(strEmail)) &#123; return true; &#125; else &#123; alert(\"您输入的Email地址格式不正确！\"); return false; &#125;&#125;/* 用途：检查输入的电话号码格式是否正确 输入： strPhone：字符串 返回： 如果通过验证返回true,否则返回false */function checkPhone(strPhone) &#123; var phoneRegWithArea = /^[0][1-9]&#123;2,3&#125;-[0-9]&#123;5,10&#125;$/; var phoneRegNoArea = /^[1-9]&#123;1&#125;[0-9]&#123;5,8&#125;$/; var prompt = \"您输入的电话号码不正确!\" if (strPhone.length &gt; 9) &#123; if (phoneRegWithArea.test(strPhone)) &#123; return true; &#125; else &#123; alert(prompt); return false; &#125; &#125; else &#123; if (phoneRegNoArea.test(strPhone)) &#123; return true; &#125; else &#123; alert(prompt); return false; &#125; &#125;&#125;/* 用途：检查复选框被选中的数目 输入： checkboxID：字符串 返回： 返回该复选框中被选中的数目 */function checkSelect(checkboxID) &#123; var check = 0; var i = 0; if (document.all(checkboxID).length &gt; 0) &#123; for (i = 0; i &lt; document.all(checkboxID).length; i++) &#123; if (document.all(checkboxID).item(i).checked) &#123; check += 1; &#125; &#125; &#125; else &#123; if (document.all(checkboxID).checked) check = 1; &#125; return check;&#125;function getTotalBytes(varField) &#123; if (varField == null) return -1; var totalCount = 0; for (i = 0; i &lt; varField.value.length; i++) &#123; if (varField.value.charCodeAt(i) &gt; 127) totalCount += 2; else totalCount++; &#125; return totalCount;&#125;function getFirstSelectedValue(checkboxID) &#123; var value = null; var i = 0; if (document.all(checkboxID).length &gt; 0) &#123; for (i = 0; i &lt; document.all(checkboxID).length; i++) &#123; if (document.all(checkboxID).item(i).checked) &#123; value = document.all(checkboxID).item(i).value; break; &#125; &#125; &#125; else &#123; if (document.all(checkboxID).checked) value = document.all(checkboxID).value; &#125; return value;&#125;function getFirstSelectedIndex(checkboxID) &#123; var value = -2; var i = 0; if (document.all(checkboxID).length &gt; 0) &#123; for (i = 0; i &lt; document.all(checkboxID).length; i++) &#123; if (document.all(checkboxID).item(i).checked) &#123; value = i; break; &#125; &#125; &#125; else &#123; if (document.all(checkboxID).checked) value = -1; &#125; return value;&#125;function selectAll(checkboxID, status) &#123; if (document.all(checkboxID) == null) return; if (document.all(checkboxID).length &gt; 0) &#123; for (i = 0; i &lt; document.all(checkboxID).length; i++) &#123; document.all(checkboxID).item(i).checked = status; &#125; &#125; else &#123; document.all(checkboxID).checked = status; &#125;&#125;function selectInverse(checkboxID) &#123; if (document.all(checkboxID) == null) return; if (document.all(checkboxID).length &gt; 0) &#123; for (i = 0; i &lt; document.all(checkboxID).length; i++) &#123; document.all(checkboxID).item(i).checked = !document.all(checkboxID).item(i).checked; &#125; &#125; else &#123; document.all(checkboxID).checked = !document.all(checkboxID).checked; &#125;&#125;function checkDate(value) &#123; if (value == '') return true; if (value.length != 8 || !isNumber(value)) return false; var year = value.substring(0, 4); if (year &gt; \"2100\" || year &lt; \"1900\") return false; var month = value.substring(4, 6); if (month &gt; \"12\" || month &lt; \"01\") return false; var day = value.substring(6, 8); if (day &gt; getMaxDay(year, month) || day &lt; \"01\") return false; return true;&#125;/* 用途：检查输入的起止日期是否正确，规则为两个日期的格式正确或都为空 且结束日期&gt;=起始日期 输入： startDate：起始日期，字符串 endDate： 结束日期，字符串 返回： 如果通过验证返回true,否则返回false */function checkPeriod(startDate, endDate) &#123; if (!checkDate(startDate)) &#123; alert(\"起始日期不正确!\"); return false; &#125; else if (!checkDate(endDate)) &#123; alert(\"终止日期不正确!\"); return false; &#125; else if (startDate &gt; endDate) &#123; alert(\"起始日期不能大于终止日期!\"); return false; &#125; return true;&#125;/* 用途：检查证券代码是否正确 输入： secCode:证券代码 返回： 如果通过验证返回true,否则返回false */function checkSecCode(secCode) &#123; if (secCode.length != 6) &#123; alert(\"证券代码长度应该为6位\"); return false; &#125; if (!isNumber(secCode)) &#123; alert(\"证券代码只能包含数字\"); return false; &#125; return true;&#125;/**************************************************** function:cTrim(sInputString,iType) description:字符串去空格的函数 parameters:iType：1=去掉字符串左边的空格 2=去掉字符串左边的空格 0=去掉字符串左边和右边的空格 return value:去掉空格的字符串 ****************************************************/function cTrim(sInputString, iType) &#123; var sTmpStr = ' '; var i = -1; if (iType == 0 || iType == 1) &#123; while (sTmpStr == ' ') &#123; ++i; sTmpStr = sInputString.substr(i, 1); &#125; sInputString = sInputString.substring(i); &#125; if (iType == 0 || iType == 2) &#123; sTmpStr = ' '; i = sInputString.length; while (sTmpStr == ' ') &#123; --i; sTmpStr = sInputString.substr(i, 1); &#125; sInputString = sInputString.substring(0, i + 1); &#125; return sInputString;&#125; //身份证验证 var Wi = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2, 1]; // 加权因子 var ValideCode = [1, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2]; // 身份证验证位值.10代表X function IdCardValidate(idCard) &#123; idCard = trim(idCard.replace(/ /g, \"\")); //去掉字符串头尾空格 if (idCard.length == 15) &#123; return isValidityBrithBy15IdCard(idCard); //进行15位身份证的验证 &#125; else if (idCard.length == 18) &#123; var a_idCard = idCard.split(\"\"); // 得到身份证数组 if (isValidityBrithBy18IdCard(idCard) &amp;&amp; isTrueValidateCodeBy18IdCard(a_idCard)) &#123; //进行18位身份证的基本验证和第18位的验证 return true; &#125; else &#123; return false; &#125; &#125; else &#123; return false; &#125; &#125; /** * 判断身份证号码为18位时最后的验证位是否正确 * @param a_idCard 身份证号码数组 * @return */ function isTrueValidateCodeBy18IdCard(a_idCard) &#123; var sum = 0; // 声明加权求和变量 if (a_idCard[17].toLowerCase() == 'x') &#123; a_idCard[17] = 10; // 将最后位为x的验证码替换为10方便后续操作 &#125; for (var i = 0; i &lt; 17; i++) &#123; sum += Wi[i] * a_idCard[i]; // 加权求和 &#125; valCodePosition = sum % 11; // 得到验证码所位置 if (a_idCard[17] == ValideCode[valCodePosition]) &#123; return true; &#125; else &#123; return false; &#125; &#125; /** * 验证18位数身份证号码中的生日是否是有效生日 * @param idCard 18位书身份证字符串 * @return */ function isValidityBrithBy18IdCard(idCard18) &#123; var year = idCard18.substring(6, 10); var month = idCard18.substring(10, 12); var day = idCard18.substring(12, 14); var temp_date = new Date(year, parseFloat(month) - 1, parseFloat(day)); // 这里用getFullYear()获取年份，避免千年虫问题 if (temp_date.getFullYear() != parseFloat(year) || temp_date.getMonth() != parseFloat(month) - 1 || temp_date.getDate() != parseFloat(day)) &#123; return false; &#125; else &#123; return true; &#125; &#125; /** * 验证15位数身份证号码中的生日是否是有效生日 * @param idCard15 15位书身份证字符串 * @return */ function isValidityBrithBy15IdCard(idCard15) &#123; var year = idCard15.substring(6, 8); var month = idCard15.substring(8, 10); var day = idCard15.substring(10, 12); var temp_date = new Date(year, parseFloat(month) - 1, parseFloat(day)); // 对于老身份证中的你年龄则不需考虑千年虫问题而使用getYear()方法 if (temp_date.getYear() != parseFloat(year) || temp_date.getMonth() != parseFloat(month) - 1 || temp_date.getDate() != parseFloat(day)) &#123; return false; &#125; else &#123; return true; &#125; &#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"js","slug":"js","permalink":"http://youhanghang.com/tags/js/"},{"name":"表单验证","slug":"表单验证","permalink":"http://youhanghang.com/tags/表单验证/"}]},{"title":"移动端使用rem单位做的页面列表","slug":"移动端简单页面","date":"2018-10-29T09:00:13.150Z","updated":"2017-06-22T10:58:06.000Z","comments":true,"path":"2018/10/29/移动端简单页面/","link":"","permalink":"http://youhanghang.com/2018/10/29/移动端简单页面/","excerpt":"","text":"移动端使用rem单位做的页面列表.","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[]},{"title":"使用原生js实现jquery功能的一部分","slug":"替代jquery的原生js实现写法","date":"2018-10-29T09:00:13.120Z","updated":"2017-06-17T08:07:28.000Z","comments":true,"path":"2018/10/29/替代jquery的原生js实现写法/","link":"","permalink":"http://youhanghang.com/2018/10/29/替代jquery的原生js实现写法/","excerpt":"","text":"使用原生js实现jquery功能的一部分，实现方式：YouMightNotNeedJquery YouMightNotNeedJquery的意义jQuery 包含大量的兼容性代码和扩展功能，其中有很多在你的整个项目中可能都不会用到。其实如果你只是针对现代浏览器，很多功能使用原生的 JavaScript 就可以实现，即使是拖后腿的低版本 IE 浏览器，兼容性也是很容易处理的。 YouMightNotNeedJquery官方网址YouMightNotNeedJquery的github网址示例","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"jquery","slug":"jquery","permalink":"http://youhanghang.com/tags/jquery/"},{"name":"原生js","slug":"原生js","permalink":"http://youhanghang.com/tags/原生js/"}]},{"title":"前端开发经验","slug":"开发经验","date":"2018-10-29T09:00:13.090Z","updated":"2018-10-29T02:03:40.000Z","comments":true,"path":"2018/10/29/开发经验/","link":"","permalink":"http://youhanghang.com/2018/10/29/开发经验/","excerpt":"","text":"前端开发规范–NEC : 更好的CSS样式解决方案自己总结 jquery通过类名获取对象时，一定要给这个元素新增 类名 ，规范可以是 j-className。然后通过 $(‘.j-className’)来获得jquery对象,理由：如果多个页面共用同一套css,html,但是js 代码处实现不同，所以应该是用 新的j-className 来当句柄，这样就能全局共用 同一套html，css。 写css先把要做的所有页面过一遍，在css文件中先把公共的css模块注释完 对库里取的值要注意NULL和’’空字符串的判断，null没有 null.indexOf，程序报错 用变量定义属性名,存储数据或对象到元素的data属性里，并获取[标题] [] [url] [link text]var a=\"name\";$('body').data(a,&#123;c:'1',d:'2'&#125;);$('body').data('name')//&#123;c: \"1\", d: \"2\"&#125;var a=\"name\";var obj=&#123;&#125;;obj[a]='xiaoming';obj//&#123;name: \"xiaoming\"&#125;&gt; 表单填写历史信息自动完成 属性autocomplete=”on”可以设置在表单上，可以在局部表单上重新设置autocomplete=”off”[标题] [] [url] [link text]&lt;form action=\"demo-form.php\" autocomplete=\"on\"&gt; First name:&lt;input type=\"text\" name=\"fname\"&gt;&lt;br&gt; Last name: &lt;input type=\"text\" name=\"lname\"&gt;&lt;br&gt; E-mail: &lt;input type=\"email\" name=\"email\" autocomplete=\"off\"&gt;&lt;br&gt; &lt;input type=\"submit\"&gt;&lt;/form&gt; //自定义展示表格数据，双击行获取当前行数据方式展示数据时将数据 存放tr的data-row={a:1,b:2} 取数据:$(‘tr’).data(‘row’) 向服务发请求返回数据 ，可能data==undefined,或者data.respondeCode==’’，应该做成一个公共函数去判断返回数据,做不同的处理，避免代码报错（例如返回undefined，后面代码还使用了data.out，结果导致后面js代码不能执行） 在不支持图像预览的网页上，实现预览图片的功能在开发者工具上 Elements下编辑html，将viewer.min.css插入进去在控制台上运行jquery框架和viewer-jquery.min.js调用插件预览图片的代码 $(‘body’).viewer(); 上传功能样式自定义[标题] [] [url] [link text]&lt;div&gt; &lt;button id=\"btn\"&gt;添加&lt;/button&gt; &lt;input id=\"fileName\" type=\"text\"&gt; &lt;input id=\"upload\" type=\"file\"&gt;&lt;/div&gt;&lt;script&gt; $('#btn').on('click',function()&#123; $('#upload')[0].click(); &#125;) $('#upload').on('change',function()&#123; $('#fileName').val($(this).val()); &#125;)&lt;/script&gt;","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"js","slug":"js","permalink":"http://youhanghang.com/tags/js/"}]},{"title":"常用css","slug":"常用css","date":"2018-10-29T09:00:13.060Z","updated":"2018-10-29T02:27:52.000Z","comments":true,"path":"2018/10/29/常用css/","link":"","permalink":"http://youhanghang.com/2018/10/29/常用css/","excerpt":"","text":"CSS实现单行、多行文本溢出显示省略号（…）20 个 CSS 高级技巧汇总 清除浮动代码[]//清除浮动代码.clearfloat:after &#123;display: block;clear: both;content: \"\";visibility: hidden;height: 0;&#125;.clearfloat&#123;zoom:1;&#125; 溢出显示省略号单行文本的溢出显示省略号p&#123;width: 100px;overflow: hidden;text-overflow:ellipsis;white-space: nowrap;&#125;//多行文本的溢出显示省略号p&#123; display: -webkit-box;-webkit-box-orient: vertical;-webkit-line-clamp: 3;overflow: hidden;&#125; 手机浏览器去除点击出现的背景色[]*&#123;-webkit-tap-highlight-color: transparent;&#125; 使用 :not() 在菜单上应用/取消应用边框[]/* add border 先给每一个菜单项添加边框*/.nav li &#123; border-right: 1px solid #666;&#125;//……然后再除去最后一个元素……// remove border .nav li:last-child &#123; border-right: none;&#125;//……可以直接使用 :not() 伪类来应用元素：.nav li:not(:last-child) &#123; border-right: 1px solid #666;&#125; 使用伪类设置列表元素的项目符号的颜色[].star-detail-text ul li::before &#123; content: \"●\"; color: rgb(148, 97, 148); position: absolute; left: -20px; top: 0px;&#125; CSS 实现隐藏滚动条同时又可以滚动[]&lt;div class=\"outer-container\"&gt; &lt;div class=\"inner-container\"&gt; &lt;div class=\"content\"&gt; ...... &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;.outer-container,.content &#123; width: 200px; height: 200px;&#125;.outer-container &#123; position: relative; overflow: hidden;&#125;.inner-container &#123; position: absolute; left: 0; overflow-x: hidden; overflow-y: scroll;&#125; /* for Chrome */.inner-container::-webkit-scrollbar &#123; display: none;&#125; 子元素在父元素居中[]&lt;div class=\"parentElement\"&gt; &lt;div class=\"childElement\"&gt;&lt;/div&gt;&lt;/div&gt; [].parentElement&#123; position:relative; width: 500px;height: 500px; background-color: red; &#125; .childElement&#123; position: absolute; top: 50%; left: 50%; transform: translate(-50%,0); width: 100px;height: 100px; background-color: cadetblue; &#125; 中间标题 两边是横线的写法[] &lt;style&gt; .checkout-title&#123; height: 50px; line-height: 50px; position: relative; text-align:center; &#125;.checkout-title:before &#123; position: absolute; top: 50%; left: 0; content: \"\"; width: 100%; height: 1px; background: #ccc; z-index: 0; &#125; .checkout-title span &#123; position: relative; padding: 0 1em; background-color: #fff; font-family: \"moderat\", sans-serif; font-weight: bold; font-size: 20px; color: #605F5F; z-index: 1; &#125; &lt;/style&gt; &lt;div class=\"checkout-title\"&gt;&lt;span&gt;购购物车购物车购物车购物车购物车购物车购物车购物车购物车物车&lt;/span&gt;&lt;/div&gt; [] 表头固定，表格内容固定高度可滚动滚动做法[]&lt;table class=\"table table-hover bordered\"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th width=\"140\"&gt;客户姓名&lt;/th&gt; &lt;th width=\"140\"&gt;证件类型&lt;/th&gt; &lt;th width=\"240\"&gt;证件号码&lt;/th&gt; &lt;th width=\"140\"&gt;状态&lt;/th&gt; &lt;th width=\"140\"&gt;操作 &lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;&lt;/table&gt;&lt;div class=\"table-overflow-auto\"&gt; &lt;table class=\"table table-hover bordered\"&gt; &lt;colgroup&gt; &lt;col style=\"width: 140px;\"&gt; &lt;col style=\"width:140px\"&gt; &lt;col style=\"width: 240px;\"&gt; &lt;col style=\"width: 140px;\"&gt; &lt;col style=\"width: 140px;\"&gt; &lt;/colgroup&gt; &lt;tbody id=\"todobusiness-table\"&gt; &lt;tr id=\"row\"&gt; &lt;td&gt;测试&lt;/td&gt;&lt;td&gt;测试&lt;/td&gt;&lt;td&gt;测试&lt;/td&gt;&lt;td&gt;测试&lt;/td&gt;&lt;td&gt;测试&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt; [] /*固定高度 可滚动*/ .table-overflow-auto &#123; height: 342px; overflow: auto; margin-top: -1px;&#125; /*滚动条宽高隐藏*/ .table-overflow-auto::-webkit-scrollbar &#123; display: none;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"css","slug":"css","permalink":"http://youhanghang.com/tags/css/"}]},{"title":"js原生dom操作","slug":"原生js的dom操作","date":"2018-10-29T09:00:13.030Z","updated":"2017-10-15T06:53:26.000Z","comments":true,"path":"2018/10/29/原生js的dom操作/","link":"","permalink":"http://youhanghang.com/2018/10/29/原生js的dom操作/","excerpt":"","text":"[标题] [] [url] [link text]/***兼容获得需要值的写法**/(function() &#123; // javascript scrollTop正解使用方法 var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;&#125;)()//容错ie的方法，将类数组转换为数组function nodeListToArray(nodes) &#123; var arr; try &#123; // 非IE支持 arr = [].slice.call(nodes); return arr; &#125; catch (err) &#123; //支持IE arr = []; for (var i = 0, length = nodes.length; i &lt; length; i++) &#123; arr.push(nodes[i]); &#125; return arr; &#125;&#125;//Array.forEach implementation for IE 7,8 support.. 使ie支持foreach if (!Array.prototype.forEach) &#123; Array.prototype.forEach = function(callback, thisArg) &#123; var T, k; if (this == null) &#123; throw new TypeError(\" this is null or not defined\"); &#125; var O = Object(this); var len = O.length &gt;&gt;&gt; 0; // Hack to convert O.length to a UInt32 if (&#123;&#125;.toString.call(callback) != \"[object Function]\") &#123; throw new TypeError(callback + \" is not a function\"); &#125; if (thisArg) &#123; T = thisArg; &#125; k = 0; while (k &lt; len) &#123; var kValue; if (k in O) &#123; kValue = O[k]; callback.call(T, kValue, k, O); &#125; k++; &#125; &#125;;&#125;//火狐浏览器不支持outerHtml的办法，不知道哪个版本不支持function outerHtml(elem) &#123; if (typeof elem === \"string\") elem = document.getElementById(elem); // 创建一个空div节点 var div = document.createElement(\"div\"); // 将复制的elemCopy插入到空div节点中 div.appendChild(elem.cloneNode(true)); // 返回div的HTML内容 return div.innerHTML;&#125;;/***兼容获得需要值的写法 结束**//***********获得属性******************///获取dom的style下的属性 可以获得absolute元素的top和left// js在获取css属性时如果标签中无style则无法直接获取css中的属性，所以需要一个方法可以做到这点。// getStyle(obj,attr) 调用方法说明：obj为对像,attr为属性名必须兼容js中的写法function getStyle(obj, attr) &#123; var ie = !+\"\\v1\"; //简单判断ie6~8 if (attr == \"backgroundPosition\") &#123; //IE6~8不兼容backgroundPosition写法，识别backgroundPositionX/Y if (ie) &#123; return obj.currentStyle.backgroundPositionX + \" \" + obj.currentStyle.backgroundPositionY; &#125; &#125; if (obj.currentStyle) &#123; return obj.currentStyle[attr]; &#125; else &#123; return document.defaultView.getComputedStyle(obj, null)[attr]; &#125;&#125;/****************获得元素相对于页面位置，区别于相对窗口的位置*****************/function getBoundingClientRect(element) &#123; var scrollTop = document.documentElement.scrollTop; var scrollLeft = document.documentElement.scrollLeft; if (element.getBoundingClientRect) &#123; if (typeof arguments.callee.offset != \"number\") &#123; var temp = document.createElement(\"div\"); temp.style.cssText = \"position:absolute;left:0;top:0;\"; document.body.appendChild(temp); arguments.callee.offset = -temp.getBoundingClientRect().top - scrollTop; document.body.removeChild(temp); temp = null; &#125; var rect = element.getBoundingClientRect(); var offset = arguments.callee.offset; return &#123; left: rect.left + offset, right: rect.right + offset, top: rect.top + offset, bottom: rect.bottom + offset &#125;; &#125; else &#123; var actualLeft = getElementLeft(element); var actualTop = getElementTop(element); return &#123; left: actualLeft - scrollLeft, right: actualLeft + element.offsetWidth - scrollLeft, top: actualTop - scrollTop, bottom: actualTop + element.offsetHeight - scrollTop &#125; &#125;&#125;//获得当前页面滚动的距离function getScrollTop() &#123; var scrollTop = 0; if (document.documentElement &amp;&amp; document.documentElement.scrollTop) &#123; scrollTop = document.documentElement.scrollTop; &#125; else if (document.body) &#123; scrollTop = document.body.scrollTop; &#125; return scrollTop;&#125;/**************选择器***************///getElementsByClassName 方法支持ie8,7。对没有getElementsByClassName方法的浏览器版本添加上这个方法if (!document.getElementsByClassName) &#123; document.getElementsByClassName = function(className, element) &#123; var children = (element || document).getElementsByTagName('*'); var elements = new Array(); for (var i = 0; i &lt; children.length; i++) &#123; var child = children[i]; var classNames = child.className.split(' '); for (var j = 0; j &lt; classNames.length; j++) &#123; if (classNames[j] == className) &#123; elements.push(child); break; &#125; &#125; &#125; return elements; &#125;;&#125;//获取id 传入 #+id//获取class 传入 .+class//获取标签 传入 标签名function $(obj) &#123; var which = obj.substr(0, 1); var newName = obj.split(which)[1]; if (which == '#') &#123; return document.getElementById(newName); &#125; else if (which == '.') &#123; return document.getElementsByClassName(newName); &#125; else &#123; return document.getElementsByTagName(obj); &#125;&#125;/****************文档处理*****************///var strHtml='';//用 node.innerHTML=;//内部处理// javascript追加html实现类似jQuery中append方法// $('.outer')[0].innerHTML+='&lt;span&gt;111&lt;/span&gt;';/************筛选****************///过滤//获得当前元素在父元素的索引function getItemIndex(current, obj) &#123; for (var i = 0; i &lt; obj.length; i++) &#123; if (obj[i] == current) &#123; return i; &#125; &#125;&#125;function hasClass(obj, cls) &#123; // 判断obj是否有此class return obj.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));&#125;function addClass(obj, cls) &#123; //给 obj添加class if (!this.hasClass(obj, cls)) &#123; obj.className += \" \" + cls; &#125;&#125;function removeClass(obj, cls) &#123; //移除obj对应的class if (hasClass(obj, cls)) &#123; var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'); obj.className = obj.className.replace(reg, \" \"); &#125;&#125;//查找//获取元素的兄弟节点function siblings(o) &#123; //参数o就是想取谁的兄弟节点，就把那个元素传进去 var a = []; //定义一个数组，用来存储o的兄弟元素 //previousSibling返回位于相同节点树层级的前一个元素 var p = o.previousSibling; while (p) &#123; //先取o的前面的兄弟元素 判断有没有上一个兄弟元素，如果有则往下执行，p表示previousSibling if (p.nodeType === 1) &#123; a.push(p); &#125; p = p.previousSibling //最后把上一个节点赋给p &#125; a.reverse(); //把顺序反转一下，这样元素的顺序就是按先后的了 //nextSibling返回位于相同节点树层级的下一个节点 var n = o.nextSibling; //再取o下面的兄弟元素 while (n) &#123; //判断有没有下一个兄弟结点，n是nextSibling的意思 if (n.nodeType === 1) &#123; //判断是否是元素节点 a.push(n); &#125; n = n.nextSibling; &#125; return a //最后按从老大到老小的顺序，把这一组元素返回&#125;/** * 获取下一个元素结点 * @param &#123;Object&#125; node 兄结点 * @return &#123;Object || null&#125;下一个元素结点或未获取到 */function getNextElement(node) &#123; if (node.nextSibling.nodeType == 1) &#123; //判断下一个节点类型为1则是“元素”节点 return node.nextSibling; &#125; if (node.nextSibling.nodeType == 3) &#123; //判断下一个节点类型为3则是“文本”节点 ，回调自身函数 return getNextElement(node.nextSibling); &#125; return null;&#125;function getChildNodes(ele) &#123; //为了提高代码的兼容性，避免个别浏览器不支持 children 或 childNodes 的情况，可以这样编写代码： var childArr = ele.children || ele.childNodes; childArrTem = new Array(); // 临时数组，用来存储符合条件的节点 for (var i = 0, len = childArr.length; i &lt; len; i++) &#123; if (childArr[i].nodeType == 1) &#123; childArrTem.push(childArr[i]); // push() 方法将节点添加到数组尾部 &#125; &#125; return childArrTem;&#125;//获取元素的兄弟节点function siblings(o) &#123; //参数o就是想取谁的兄弟节点，就把那个元素传进去 var a = []; //定义一个数组，用来存储o的兄弟元素 //previousSibling返回位于相同节点树层级的前一个元素 var p = o.previousSibling; while (p) &#123; //先取o的前面的兄弟元素 判断有没有上一个兄弟元素，如果有则往下执行，p表示previousSibling if (p.nodeType === 1) &#123; a.push(p); &#125; p = p.previousSibling //最后把上一个节点赋给p &#125; a.reverse(); //把顺序反转一下，这样元素的顺序就是按先后的了 //nextSibling返回位于相同节点树层级的下一个节点 var n = o.nextSibling; //再取o下面的兄弟元素 while (n) &#123; //判断有没有下一个兄弟结点，n是nextSibling的意思 if (n.nodeType === 1) &#123; //判断是否是元素节点 a.push(n); &#125; n = n.nextSibling; &#125; return a //最后按从老大到老小的顺序，把这一组元素返回&#125;/*************效果******************/function animate(obj, json, interval, sp, fn) &#123; clearInterval(obj.timer); //var k = 0; //var j = 0; function getStyle(obj, arr) &#123; if (obj.currentStyle) &#123; return obj.currentStyle[arr]; //针对ie &#125; else &#123; return document.defaultView.getComputedStyle(obj, null)[arr]; &#125; &#125; obj.timer = setInterval(function() &#123; //j ++; var flag = true; for (var arr in json) &#123; var icur = 0; //k++; if (arr == \"opacity\") &#123; icur = Math.round(parseFloat(getStyle(obj, arr)) * 100); &#125; else &#123; icur = parseInt(getStyle(obj, arr)); &#125; var speed = (json[arr] - icur) * sp; speed = speed &gt; 0 ? Math.ceil(speed) : Math.floor(speed); if (icur != json[arr]) &#123; flag = false; &#125; if (arr == \"opacity\") &#123; obj.style.filter = \"alpha(opacity : '+(icur + speed)+' )\"; obj.style.opacity = (icur + speed) / 100; &#125; else &#123; obj.style[arr] = icur + speed + \"px\"; &#125; //console.log(j + \",\" + arr +\":\"+ flag); &#125; if (flag) &#123; clearInterval(obj.timer); //console.log(j + \":\" + flag); //console.log(\"k = \" + k); //console.log(\"j = \" + j); //console.log(\"DONE\"); if (fn) &#123; fn(); &#125; &#125; &#125;, interval);&#125;/***************ajax*******************/// 原生ajax//get get get// 使用 GET 请求经常会发生的一个错误，就是查询字符串的格式有问题。查询字符串中每个参数的名// 称和值都必须使用 encodeURIComponent()进行编码，然后才能放到 URL 的末尾；而且所有名-值对// 儿都必须由和号（&amp;）分隔，如下面的例子所示。// xhr.open(\"get\", \"example.php?name1=value1&amp;name2=value2\", true);// 下面这个函数可以辅助向现有 URL 的末尾添加查询字符串参数：function addURLParam(url, name, value) &#123; url += (url.indexOf(\"?\") == -1 ? \"?\" : \"&amp;\"); url += encodeURIComponent(name) + \"=\" + encodeURIComponent(value); return url;&#125;// 下面是使用这个函数来构建请求 URL 的示例。// var url = \"example.php\";// //添加参数// url = addURLParam(url, \"name\", \"Nicholas\");// url = addURLParam(url, \"book\", \"Professional JavaScript\");// //初始化请求// xhr.open(\"get\", url, false);// 在这里使用 addURLParam()函数可以确保查询字符串的格式良好，并可靠地用于 XHR 对象。//get 请求实例// var xhr = createXHR();// xhr.onreadystatechange = function() &#123;// if (xhr.readyState == 4) &#123;// if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304) &#123;// alert(xhr.responseText);// &#125; else &#123;// alert(\"Request was unsuccessful: \" + xhr.status);// &#125;// &#125;// &#125;;// var url = \"/myweb/public/index/index/hello\";// //添加参数// url = addURLParam(url, \"book\", \"Professional JavaScript\");// xhr.open(\"get\", url, false);// xhr.send(null);//post post post// 这个函数中新增的代码首先检测原生 XHR 对象是否存在，如果存在则返回它的新实例。如果原生// 对象不存在，则检测 ActiveX 对象。如果这两种对象都不存在，就抛出一个错误。然后，就可以使用下// 面的代码在所有浏览器中创建 XHR 对象了。// var xhr = createXHR();// 由于其他浏览器中对 XHR 的实现与 IE 最早的实现是兼容的，因此就可以在所有浏览器中都以相同// 方式使用上面创建的 xhr 对象function createXHR() &#123; if (typeof XMLHttpRequest != \"undefined\") &#123; return new XMLHttpRequest(); &#125; else if (typeof ActiveXObject != \"undefined\") &#123; if (typeof arguments.callee.activeXString != \"string\") &#123; var versions = [\"MSXML2.XMLHttp.6.0\", \"MSXML2.XMLHttp.3.0\", \"MSXML2.XMLHttp\" ], i, len; for (i = 0, len = versions.length; i &lt; len; i++) &#123; try &#123; new ActiveXObject(versions[i]); arguments.callee.activeXString = versions[i]; break; &#125; catch (ex) &#123; //跳过 &#125; &#125; &#125; return new ActiveXObject(arguments.callee.activeXString); &#125; else &#123; throw new Error(\"No XHR object available.\"); &#125;&#125;// 我们可以使用 XHR 来模仿表单提// 交：首先将 Content-Type 头部信息设置为 application/x-www-form-urlencoded，也就是表单// 提交时的内容类型，其次是以适当的格式创建一个字符串。第 14 章曾经讨论过， POST 数据的格式与查// 询字符串格式相同。如果需要将页面中表单的数据进行序列化，然后再通过 XHR 发送到服务器，那么// 就可以使用第 14 章介绍的 serialize()函数来创建这个字符串//post实例// function submitData() &#123;// var xhr = createXHR();// xhr.onreadystatechange = function() &#123;// if (xhr.readyState == 4) &#123;// if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304) &#123;// alert(xhr.responseText);// &#125; else &#123;// alert(\"Request was unsuccessful: \" + xhr.status);// &#125;// &#125;// &#125;;// xhr.open(\"post\", \"/myweb/public/index/index/hello\", true);// xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");// var form = document.getElementById(\"form1\");// xhr.send(serialize(form));// console.log('zhixingle')// &#125;// submitData();/*************其他****************/function serialize(form) &#123; var parts = [], field = null, i, len, j, optLen, option, optValue; for (i = 0, len = form.elements.length; i &lt; len; i++) &#123; field = form.elements[i]; switch (field.type) &#123; case \"select-one\": case \"select-multiple\": if (field.name.length) &#123; for (j = 0, optLen = field.options.length; j &lt; optLen; j++) &#123; option = field.options[j]; if (option.selected) &#123; optValue = \"\"; if (option.hasAttribute) &#123; optValue = (option.hasAttribute(\"value\") ? option.value : option.text); &#125; else &#123; optValue = (option.attributes[\"value\"].specified ? option.value : option.text); &#125; parts.push(encodeURIComponent(field.name) + \"=\" + encodeURIComponent(optValue)); &#125; &#125; &#125; break; case undefined: //fieldset case \"file\": //file input case \"submit\": //submit button case \"reset\": //reset button case \"button\": //custom button break; case \"radio\": //radio button case \"checkbox\": //checkbox if (!field.checked) &#123; break; &#125; /* falls through */ default: //don't include form fields without names if (field.name.length) &#123; parts.push(encodeURIComponent(field.name) + \"=\" + encodeURIComponent(field.value)); &#125; &#125; &#125; return parts.join(\"&amp;\");&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"js","slug":"js","permalink":"http://youhanghang.com/tags/js/"},{"name":"dom操作","slug":"dom操作","permalink":"http://youhanghang.com/tags/dom操作/"}]},{"title":"前端插件收藏","slug":"前端插件收藏","date":"2018-10-29T09:00:13.000Z","updated":"2018-01-15T09:27:04.000Z","comments":true,"path":"2018/10/29/前端插件收藏/","link":"","permalink":"http://youhanghang.com/2018/10/29/前端插件收藏/","excerpt":"","text":"百度搜索前端插件收藏前端案例收藏Web 前端常用插件 滚动视差 创建逼真的物理动画的 JS 库","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"收集","slug":"收集","permalink":"http://youhanghang.com/tags/收集/"}]},{"title":"写过的oracle语句","slug":"写过的oracle语句","date":"2018-10-29T09:00:12.970Z","updated":"2018-01-09T07:40:44.000Z","comments":true,"path":"2018/10/29/写过的oracle语句/","link":"","permalink":"http://youhanghang.com/2018/10/29/写过的oracle语句/","excerpt":"","text":"使用时间戳去查询某个时间的数据库里的数据SELECT * FROM SYS_CODE AS OF TIMESTAMP TO_TIMESTAMP ( ‘2017-12-08 11:00:00’, ‘yyyy-mm-dd hh24:mi:ss’ ) where CODE_KIND like ‘%指标%’; 聚合函数和groupby使用[]//按code_order排序查询出 code_kind = '经济技术指标'下，7大分类和其的下面子分类SELECT RAWTOHEX (SYS_GUID()) AS ID, textFROM ( SELECT text,max(code_order) code_order FROM ( SELECT code_kind || '#' || CODE_EXTEND ||'#'|| CODE_COMMENT text, code_order FROM sys_code WHERE code_kind = '经济技术指标' ORDER BY CODE_ORDER ) GROUP BY text ORDER BY code_order )1940196AA8464F8EBBD748AADEA37448 经济技术指标#采油厂#主要经济技术指标 19007904.41EEDF42BF48E146C88376A33B071B84B7 经济技术指标#采气厂#主要经济技术指标 19082216.34C66FC38AAC9B433FBA4014DF35E87CBE 经济技术指标#净化厂#主要经济技术指标 19330989.19ADC493ECA2F0440990A19A95C320BAFD 经济技术指标#采油(气)管理区#采油管理区 19347891.18263BAEB90E744F4FB0BE122473F9BB8D 经济技术指标#采油(气)管理区#采气管理区 19349672.5636965005827C436483129B188B7477D8 经济技术指标#采油(气)厂科研单位#采油厂地质研究所 19411223.364B36BAC1FADC4B63AA205E3B8CAC1466 经济技术指标#采油(气)厂科研单位#采油厂工艺研究所 19411247.36024AC7FC298C43EDBAFEC20693CD0F66 经济技术指标#采油(气)厂科研单位#采油厂开发研究所 19411283.360C583DDA75534BCDBB3DFB35A32E990E 经济技术指标#采油(气)厂科研单位#采气厂地质研究所 19411292.36341F0E80EA6044FA9EC38F116E6FBF9C 经济技术指标#采油(气)厂科研单位#采气厂工艺研究所 19411307.36340958BACDB8457E80BADA85A99FDE0C 经济技术指标#采油(气)厂科研单位#采气厂开发研究所 19411325.36B592CCF2233A4BC7AAC8C90FC65FB7C5 经济技术指标#集输站库#联合站(库)考核指标 19413747.179F4A512D9CDF47729815FF60B8FA15AF 经济技术指标#集输站库#油库首(末)站 19429714.9423E8474C0BC94E60A312F9A58A02CA8F 经济技术指标#集输站库#污水处理站 19431122.878F977A28A79140389D6669AFEB488D93 经济技术指标#集输站库#输气队、集(压)气站 19518298.82AD75747D36A04C39965AA69B749E9B98 经济技术指标#集输站库#气体处理站、天然气净化站(车间) 19519173.341B92168931BE462DB9834CFAA8B292E2 经济技术指标#集输站库#变电所 19519948.891FBD020EE667427D9CF1B3A5BB83920D 经济技术指标#专业化队伍#井下作业队(大修队、压列队、试油队) 19520403.65983B5AD47BD54835BE4A79B537CA095C 经济技术指标#专业化队伍#注汽队 19520887.447C7B936FB2D34A33901115350FA072EB 经济技术指标#专业化队伍#注聚队 19522366.16E733B848F071406C9D15B81861EE8F79 经济技术指标#专业化队伍#测试队 19523163.4960B1C13D742C454E9D4CF9AD906EBA82 经济技术指标#专业化队伍#厂直属维修队、生产准备队、安装队 19523799.682827A7D83728427690E40C0B2D16C6FE 经济技术指标#专业化队伍#运输(特车)队 19524075.88 将一行数据折成三行显示原来的一行数据 EPXID DATA_WRAP DATA_KIND DATA_OTHERFLAG DATA_STATE DATA_YEAR DATA_MONTH DATA_DAY DATA_ORDER DATA_USEFLAG DATA_DELFLAG DATA_VCODE 单位全称 数据年度 数据季度 参评类型 利润比先进 利润比进步 利润比贡献 单位操作成本比先进 单位操作成本比进步 单位操作成本比贡献 原油产量比先进 原油产量比进步 原油产量比贡献 天然气产量比先进 天然气产量比进步 天然气产量比贡献 单位综合能耗比先进 单位综合能耗比进步 单位综合能耗比贡献 利润比先进得分 利润比进步得分 利润比贡献得分 单位操作成本比先进得分 单位操作成本比进步得分 单位操作成本比贡献得分 原油产量比先进得分 原油产量比进步得分 原油产量比贡献得分 天然气产量比先进得分 天然气产量比进步得分 天然气产量比贡献得分 单位综合能耗比先进得分 单位综合能耗比进步得分 单位综合能耗比贡献得分 利润得分 单位操作成本得分 原油产量得分 天然气产量得分 单位综合能耗得分 三项指标总得分 数据锁值 最后修改人员 最后修改时间0BFDA3E7-BABB-4251-A182-03ED20DAD316 1 三项指标 FLC 1 2017 12 12 23059539.0350 1 0 胜利油田分公司胜利采油厂 2017 采油厂 109.9959 108.3584 1234 894 -6.8790 2 114.9701 14.4902 25 40 40 19.60 39.20 39.20 19.60 40 40 20 99.60 98 100 99.173333333333 admin 2017-12-12 查询成3行数据 CODE_NM 比先进 比进步 比贡献 得分 利润分值 109.9959#100#40 108.3584#100#40 2#98#19.6 2#98#19.6 单位操作成本分值 2#98#19.6 2#98#19.6 2#98#19.6 2#98#19.6 原油产量分值 2#98#19.6 2#98#19.6 2#98#19.6 2#98#19.6 平均得分 99.173333333333 []SELECT A .CODE_NM, b.比先进, b.比进步, b.比贡献, b.得分FROM ( SELECT ROWNUM rn, CODE_NM FROM ( SELECT CODE_NM, CODE_ORDER FROM ( SELECT CODE_NM, CODE_ORDER FROM SYS_CODE WHERE CODE_TIME = '2017' AND CODE_KIND = '三项权重信息' AND CODE_VCODE = '采油厂' AND CODE_NM LIKE '%分值' UNION SELECT '平均得分' CODE_NM, 999999999 CODE_ORDER FROM dual WHERE ROWNUM = 1 ) ORDER BY code_order ) ) A, ( SELECT ROWNUM rn, 比先进, 比进步, 比贡献, 得分 FROM ( SELECT 1, 利润比先进||'#'||利润比先进得分/0.4||'#'||利润比先进得分 比先进, 利润比进步||'#'||利润比进步得分/0.4||'#'||利润比进步得分 比进步, 利润比贡献||'#'||利润比贡献得分/0.2||'#'||利润比贡献得分 比贡献, 利润得分 得分 FROM V_SXZB3727470703 WHERE 单位全称 = '胜利油田分公司胜利采油厂' AND 数据年度 = '2017' UNION SELECT 2, 单位操作成本比先进||'#'||单位操作成本比先进得分/0.4||'#'||单位操作成本比先进得分 比先进, 单位操作成本比进步||'#'||单位操作成本比进步得分/0.4||'#'|| 单位操作成本比进步得分, 单位操作成本比贡献||'#'||单位操作成本比贡献得分/0.2||'#'|| 单位操作成本比贡献得分, 单位操作成本得分 得分 FROM V_SXZB3727470703 WHERE 单位全称 = '胜利油田分公司胜利采油厂' AND 数据年度 = '2017' UNION SELECT 3, 原油产量比先进||'#'||原油产量比先进得分/0.4||'#'||原油产量比先进得分 比先进, 原油产量比进步||'#'||原油产量比进步得分/0.4||'#'||原油产量比进步得分 比进步, 原油产量比贡献||'#'||原油产量比贡献得分/0.2||'#'||原油产量比贡献得分 比贡献, 原油产量得分 得分 FROM V_SXZB3727470703 WHERE 单位全称 = '胜利油田分公司胜利采油厂' AND 数据年度 = '2017' UNION SELECT 4, NULL 比先进 , NULL 比进步 , NULL 比贡献 , 三项指标总得分 得分 FROM V_SXZB3727470703 WHERE 单位全称 = '胜利油田分公司胜利采油厂' AND 数据年度 = '2017' ) ) bWHERE A .rn = b.rn","categories":[{"name":"oracle","slug":"oracle","permalink":"http://youhanghang.com/categories/oracle/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"http://youhanghang.com/tags/oracle/"}]},{"title":"写博客常用","slug":"写博客常用","date":"2018-10-29T09:00:12.950Z","updated":"2017-11-11T09:55:50.000Z","comments":true,"path":"2018/10/29/写博客常用/","link":"","permalink":"http://youhanghang.com/2018/10/29/写博客常用/","excerpt":"","text":"js表单验证大全测试代码高亮[标题] [] [url] [link text] 3. 高亮一段代码[^code] @requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world'","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"其他","slug":"其他","permalink":"http://youhanghang.com/tags/其他/"}]},{"title":"事件委托","slug":"事件委托","date":"2018-10-29T09:00:12.920Z","updated":"2018-04-22T07:32:34.000Z","comments":true,"path":"2018/10/29/事件委托/","link":"","permalink":"http://youhanghang.com/2018/10/29/事件委托/","excerpt":"","text":"百度搜索事件委托实验室有事件委托例子什么是事件委托？事件委托——给父元素绑定事件，用来监听子元素的冒泡事件，并找到是哪个子元素的事件。好处：避免对每个字元素添加事件监听器，减少操作DOM节点的次数，从而减少浏览器的重绘和重排，提高代码的性能。 jquery事件委托e.target 产生事件的元素对象，例如直接被点击的元素e.currentTarget 处理事件的当前元素对象，也就是当前事件函数里的this为ul绑定事件，e为ul事件对象点击li，e.target为li,e.currentTarget为ul，e.target!=e.currentTarget点击ul，e.target为ul,e.currentTarget为ul，e.target==e.currentTarget[标题] [] [url] [link text]&lt;!-- &lt;div&gt; &lt;ul&gt; &lt;li&gt;&lt;a&gt;测试1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;测试2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;测试3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;测试4&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;测试5&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;测试6&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;测试7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;测试8&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; --&gt;$(\"ul\").on('click',function(e)&#123; alert(\"点击的内容是：\"+$(e.target).text());&#125;); js事件委托[标题] [] [url] [link text]&lt;!-- &lt;div&gt; &lt;ul&gt; &lt;li&gt;&lt;a&gt;测试1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;测试2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;测试3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;测试4&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;测试5&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;测试6&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;测试7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;测试8&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; --&gt;document.getElementsByTagName(\"ul\")[0].addEventListener('click',function(e)&#123; alert(\"点击的内容是：\"+e.target.innerHTML);&#125;);","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"js，jquery","slug":"js，jquery","permalink":"http://youhanghang.com/tags/js，jquery/"}]},{"title":"webpack学习(一)","slug":"webpack","date":"2018-10-29T09:00:12.890Z","updated":"2018-01-09T07:19:48.000Z","comments":true,"path":"2018/10/29/webpack/","link":"","permalink":"http://youhanghang.com/2018/10/29/webpack/","excerpt":"","text":"百度搜索webpack入门Webpack，看这篇就够了","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"http://youhanghang.com/tags/webpack/"}]},{"title":"学习markdown写法","slug":"markdown语法","date":"2018-10-29T09:00:12.860Z","updated":"2017-12-18T09:27:32.000Z","comments":true,"path":"2018/10/29/markdown语法/","link":"","permalink":"http://youhanghang.com/2018/10/29/markdown语法/","excerpt":"","text":"欢迎使用 Cmd Markdown 编辑阅读器 半方大的空白&ensp;或&#8194;全方大的空白&emsp;或&#8195;不断行的空白格&nbsp;或&#160; 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 [ ] 支持以 PDF 格式导出文稿 [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 [x] 新增 Todo 列表功能 [x] 修复 LaTex 公式渲染问题 [x] 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格注意：表格上下要有空行，不然编译不出来:- 默认左对齐-:右对齐:-:居中 项目 价格 数量 计算机 \\$1600 5 手机 \\$12 12 管线 \\$1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。","categories":[{"name":"其他技术","slug":"其他技术","permalink":"http://youhanghang.com/categories/其他技术/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://youhanghang.com/tags/markdown/"}]},{"title":"js计算","slug":"js计算","date":"2018-10-29T09:00:12.840Z","updated":"2017-12-14T07:23:18.000Z","comments":true,"path":"2018/10/29/js计算/","link":"","permalink":"http://youhanghang.com/2018/10/29/js计算/","excerpt":"","text":"js字符串常用函数[标题] [] [url] [link text] js加减乘除[标题] [] [url] [link text]//加 function floatAdd(arg1, arg2) &#123; var r1, r2, m; try &#123; r1 = arg1.toString().split(\".\")[1].length &#125; catch (e) &#123; r1 = 0 &#125; try &#123; r2 = arg2.toString().split(\".\")[1].length &#125; catch (e) &#123; r2 = 0 &#125; m = Math.pow(10, Math.max(r1, r2)); return (arg1 * m + arg2 * m) / m;&#125;//减 function floatSub(arg1, arg2) &#123; var r1, r2, m, n; try &#123; r1 = arg1.toString().split(\".\")[1].length &#125; catch (e) &#123; r1 = 0 &#125; try &#123; r2 = arg2.toString().split(\".\")[1].length &#125; catch (e) &#123; r2 = 0 &#125; m = Math.pow(10, Math.max(r1, r2)); //动态控制精度长度 n = (r1 &gt;= r2) ? r1 : r2; return ((arg1 * m - arg2 * m) / m).toFixed(n);&#125;//乘 function floatMul(arg1, arg2) &#123; var m = 0, s1 = arg1.toString(), s2 = arg2.toString(); try &#123; m += s1.split(\".\")[1].length &#125; catch (e) &#123; &#125; try &#123; m += s2.split(\".\")[1].length &#125; catch (e) &#123; &#125; return Number(s1.replace(\".\", \"\")) * Number(s2.replace(\".\", \"\")) / Math.pow(10, m);&#125;//除 function floatDiv(arg1, arg2) &#123; var t1 = 0, t2 = 0, r1, r2; try &#123; t1 = arg1.toString().split(\".\")[1].length &#125; catch (e) &#123; &#125; try &#123; t2 = arg2.toString().split(\".\")[1].length &#125; catch (e) &#123; &#125; r1 = Number(arg1.toString().replace(\".\", \"\")); r2 = Number(arg2.toString().replace(\".\", \"\")); return (r1 / r2) * Math.pow(10, t2 - t1);&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"js","slug":"js","permalink":"http://youhanghang.com/tags/js/"},{"name":"js计算","slug":"js计算","permalink":"http://youhanghang.com/tags/js计算/"}]},{"title":"js常用日期函数","slug":"js日期函数","date":"2018-10-29T09:00:12.810Z","updated":"2018-01-09T07:24:48.000Z","comments":true,"path":"2018/10/29/js日期函数/","link":"","permalink":"http://youhanghang.com/2018/10/29/js日期函数/","excerpt":"","text":"js常用日期函数js常用日期函数[标题] [] [url] [link text]1. 取得当前时间：var date=new Date(); 2. 比较两日期相差的天数是否大于5：parseInt((date1-date2) / (1000 * 60 * 60 * 24)) &gt; 5 3. 比较两个时间：if(date1.valueOf()&gt;date2.valueOf()) &#123; alert(\"输入日期不得小于当前日期！\"); &#125; else &#123; alert(\"OK!\"); &#125; 4. 取得当前时间的时分秒var today=new Date(); var year=today.getFullYear(); var month=today.getMonth()+1; var day=today.getDate(); var hour=today.getHours(); var minute=today.getMinutes(); var second=today.getSeconds(); 5. 时间相加：取得固定时间（2006年8月12日）35天之后的时间var date =new Date(\"2006，7，12\"); date.setDate(date.getDate()+35); 6. Date对象的方法 Date 对象能够使你获得相对于国际标准时间（格林威治标准时间，现在被称为 UTC-Universal Coordinated Time）。要使用Date对象的方法，你就必须先创建一个Date对象的实体（Instance）。 Date 对象的方法并不是静态的，但是在使用时却可以应用于所指定的单独实体。 Date 对象的方法简介： ·getDate ｜ 根据本地时间获取当前日期(本月的几号) ·getDay ｜ 根据本地时间获取今天是星期几(0-Sunday,1-Monday...) ·getFullYear ｜ 根据本地时间获取当前年份(四位数字) ·getHours ｜ 根据本地时间获取当前小时数(24小时制,0-23) ·getMilliseconds ｜ 根据本地时间获取当前毫秒数 ·getMinutes ｜ 根据本地时间获取当前分钟数 ·getMonth ｜ 根据本地时间获取当前月份(注意从0开始:0-Jan,1-Feb...) ·getSeconds ｜ 根据本地时间获取当前秒数 ·getTime ｜ 获取UTC格式的从1970.1.1 0:00以来的毫秒数 ·getTimezoneOffset ｜ 获取当前时间和UTC格式的偏移值(以分钟为单位) ·getUTCDate ｜ 获取UTC格式的当前日期(本月的几号) ·getUTCDay ｜ 获取UTC格式的今天是星期几(0-Sunday,1-Monday...) ·getUTCFullYear ｜ 获取UTC格式的当前年份(四位数字) ·getUTCHours ｜ 获取UTC格式的当前小时数(24小时制,0-23) ·getUTCMilliseconds ｜ 获取UTC格式的当前毫秒数 ·getUTCMinutes ｜ 获取UTC格式的当前分钟数 ·getUTCMonth ｜ 获取UTC格式的当前月份(注意从0开始:0-Jan,1-Feb...) ·getUTCSeconds ｜ 获取UTC格式的当前秒数 ·getYear ｜ 根据本地时间获取当前缩写年份(当前年份减去1900) ·setDate ｜ 设置当前日期(本月的几号) ·setFullYear ｜ 设置当前年份(四位数字) ·setHours ｜ 设置当前小时数(24小时制,0-23) ·setMilliseconds ｜ 设置当前毫秒数 ·setMinutes ｜ 设置当前分钟数 ·setMonth ｜ 设置当前月份(注意从0开始:0-Jan,1-Feb...) ·setSeconds ｜ 设置当前秒数 ·setTime ｜ 设置UTC格式的从1970.1.1 0:00以来的毫秒数 ·setUTCDate ｜ 设置UTC格式的当前日期(本月的几号) ·setUTCFullYear ｜ 设置UTC格式的当前年份(四位数字) ·setUTCHours ｜ 设置UTC格式的当前小时数(24小时制,0-23) ·setUTCMilliseconds ｜ 设置UTC格式的当前毫秒数 ·setUTCMinutes ｜ 设置UTC格式的当前分钟数 ·setUTCMonth ｜ 设置UTC格式的当前月份(注意从0开始:0-Jan,1-Feb...) ·setUTCSeconds ｜ 设置UTC格式的当前秒数 ·setYear ｜ 设置当前缩写年份(当前年份减去1900) ·toString ｜ 将日期时间值转换成\"日期/时间\"形式的字符串值 ·Date.UTC ｜ 返回指定的UTC格式日期时间的固定时间值 7. 创建新的 Date 对象 语法： new Date(); new Date(year [, month [, date [, hour [, minute [, second [, millisecond ]]]]]] ); 参数： year 是一个 0 到 99 之间的整数，对应于 1900 到 1999 年，或者为四位数字指定确定的年份； month 是一个 0 (一月) 到 11 (十二月) 之间的整数，这个参数是可选的； date 是一个 1 到 31 之间的整数，这个参数是可选的； hour 是一个 0 (0:00am) 到 23 (11:00pm) 之间的整数，这个参数是可选的； minute 是一个 0 到 59 之间的整数，这个参数是可选的； second 是一个 0 到 59 之间的整数，这个参数是可选的； millisecond 是一个 0 到 999 之间的整数，这个参数是可选的； 注释： 对象。新建一个 Date 对象。 例子： 下面是获得当前日期和时间的例子： now = new Date(); 下面创建一个关于国庆节的 Date 对象的例子： national_day = new Date (49, 10, 1); 下面是新建一个 Date 对象后，利用 Date 对象的 getMonth、getDate、和 getFullYear方法获取时间，然后在动态文本框中输出的例子。 myDate = new Date(); dateTextField = (mydate.getMonth() + \"/\" + myDate.getDate() + \"/\" + mydate.getFullYear()); 日期格式化[标题] [] [url] [link text]//将字符串日期格式化为yyyy-mm-dd function formatDate(date) &#123; var d = new Date(date), month = '' + (d.getMonth() + 1), day = '' + d.getDate(), year = d.getFullYear(); if (month.length &lt; 2) month = '0' + month; if (day.length &lt; 2) day = '0' + day; return [year, month, day].join('-'); &#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"js","slug":"js","permalink":"http://youhanghang.com/tags/js/"}]},{"title":"js数组","slug":"JS数组","date":"2018-10-29T09:00:12.780Z","updated":"2018-04-21T07:52:40.000Z","comments":true,"path":"2018/10/29/JS数组/","link":"","permalink":"http://youhanghang.com/2018/10/29/JS数组/","excerpt":"","text":"转载自https://jeffjade.com/2015/09/25/2015-09-25-js-array/#百度搜索js数组 js数组常用方法多维数组转一维//[1, 2, 3, 4, 5, 6]+&quot;&quot;//&quot;1,2,3,4,5,6&quot;var arr = [1,[2,[[3,4],5],6]];function unid(arr)&#123; var arr1 = (arr + &apos;&apos;).split(&apos;,&apos;);//将数组转字符串后再以逗号分隔转为数组 var arr2 = arr1.map(function(x)&#123; return Number(x); &#125;); return arr2;&#125;console.log(unid(arr)); 数组排序var arr1 = [1, 2, 5, 4, 3, 2, 7, 6, 9];var arr2 = [&apos;1&apos;, &apos;2&apos;, &apos;5&apos;, &apos;4&apos;, &apos;3&apos;, &apos;2&apos;, &apos;7&apos;, &apos;6&apos;, &apos;9&apos;];var arr3 = [&#123; date: &quot;2018&quot;, title: &quot;ttt&quot; &#125;, &#123; date: &quot;2017&quot;, title: &quot;ttt&quot; &#125;, &#123; date: &quot;2018&quot;, title: &quot;ttt&quot; &#125;, &#123; date: &quot;2018&quot;, title: &quot;ttt&quot; &#125;, &#123; date: &quot;2018&quot;, title: &quot;ttt&quot; &#125;, &#123; date: &quot;2018&quot;, title: &quot;ttt&quot; &#125;, &#123; date: &quot;2017&quot;, title: &quot;ttt&quot; &#125;, &#123; date: &quot;2016&quot;, title: &quot;ttt&quot; &#125;];var arr4 = [&#123; time: &quot;2018-02-20&quot;, title: &quot;ttt&quot; &#125;, &#123; time: &quot;2017-04-20&quot;, title: &quot;ttt&quot; &#125;, &#123; time: &quot;2018-03-20&quot;, title: &quot;ttt&quot; &#125;, &#123; time: &quot;2018-04-20&quot;, title: &quot;ttt&quot; &#125;, &#123; time: &quot;2018-04-20&quot;, title: &quot;ttt&quot; &#125;, &#123; time: &quot;2018-04-20&quot;, title: &quot;ttt&quot; &#125;, &#123; time: &quot;2017-04-20&quot;, title: &quot;ttt&quot; &#125;, &#123; time: &quot;2016-04-20&quot;, title: &quot;ttt&quot; &#125;];console.log(arr1);console.log(arr2);console.log(arr3);console.log(arr4);function compare(value1, value2) &#123; if (value1 &lt; value2) &#123; return -1; &#125; else if (value1 &gt; value2) &#123; return 1; &#125; else &#123; return 0; &#125;&#125;function createComparisonFunction(propertyName) &#123; return function (object1, object2) &#123; var value1 = object1[propertyName]; var value2 = object2[propertyName]; if (value1 &lt; value2) &#123; return -1; &#125; else if (value1 &gt; value2) &#123; return 1; &#125; else &#123; return 0; &#125; &#125;;&#125;function createComparisonFunction2(propertyName) &#123; return function (object1, object2) &#123; //将time属性的值转换成时间戳 var value1 = new Date(object1[propertyName]).getTime(); var value2 = new Date(object2[propertyName]).getTime(); if (value1 &lt; value2) &#123; return -1; &#125; else if (value1 &gt; value2) &#123; return 1; &#125; else &#123; return 0; &#125; &#125;;&#125;arr1.sort(compare);arr2.sort(compare);arr3.sort(createComparisonFunction(&apos;date&apos;));arr4.sort(createComparisonFunction2(&apos;time&apos;));console.log(arr1);console.log(arr2);console.log(&quot;arr3&quot;, arr3);console.log(&quot;arr4&quot;, arr4); 数组元素的添加arrayObj.push([item1 [item2 [. . . [itemN ]]]]);// 将一个或多个新元素添加到数组结尾，并返回数组新长度arrayObj.unshift([item1 [item2 [. . . [itemN ]]]]);// 将一个或多个新元素添加到数组开始，数组中的元素自动后移，返回数组新长度arrayObj.splice(insertPos,0,[item1[, item2[, . . . [,itemN]]]]);//将一个或多个新元素插入到数组的指定位置，插入位置的元素自动后移，返回&quot;&quot;。 数组元素的删除arrayObj.pop(); //移除最后一个元素并返回该元素值arrayObj.shift(); //移除最前一个元素并返回该元素值，数组中元素自动前移arrayObj.splice(deletePos,deleteCount);//删除从指定位置deletePos开始的指定数量deleteCount的元素，数组形式返回所移除的元素 数组的截取和合并arrayObj.slice(start, [end]);//以数组的形式返回数组的一部分，注意不包括 end 对应的元素，如果省略 end 将复制 start 之后的所有元素arrayObj.concat([item1[, item2[, . . . [,itemN]]]]);//将多个数组（也可以是字符串，或者是数组和字符串的混合）连接为一个数组，返回连接好的新的数组 数组的拷贝arrayObj.slice(0); //返回数组的拷贝数组，注意是一个新的数组，不是指向arrayObj.concat(); //返回数组的拷贝数组，注意是一个新的数组，不是指向 数组元素的排序arrayObj.reverse(); //反转元素（最前的排到最后、最后的排到最前），返回数组地址arrayObj.sort(); //对数组元素排序，返回数组地址 数组元素转字符串，字符串转数组var arr = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, 1, 2, 3];arr.join(&apos;-&apos;); // &apos;A-B-C-1-2-3&apos;arr.split(&apos;-&apos;); // [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, 1, 2, 3] 通过indexOf()来搜索一个指定的元素的位置var arr = [10, 20, &apos;30&apos;, &apos;xyz&apos;];arr.indexOf(10); // 元素10的索引为0arr.indexOf(30); // 元素30没有找到，返回-1arr.indexOf(&apos;30&apos;); // 元素&apos;30&apos;的索引为2 判断是不是数组function isArray(obj) &#123; return Object.prototype.toString.call(obj) === &apos;[object Array]&apos;; &#125;//Array.isArray()^See方法用来判断某个值是否为数组// 下面的函数调用都返回 trueArray.isArray([]);Array.isArray([1]);Array.isArray(new Array());// 鲜为人知的事实：其实 Array.prototype 也是一个数组。Array.isArray(Array.prototype);// 下面的函数调用都返回 falseArray.isArray();Array.isArray(&#123;&#125;);Array.isArray(null);Array.isArray(undefined);Array.isArray(17);Array.isArray(&apos;Array&apos;);Array.isArray(true);Array.isArray(false);Array.isArray(&#123; __proto__: Array.prototype &#125;); 数组迭代过程filter()//方法使用指定的函数测试所有元素，并创建一个包含所有通过测试的元素的新数组function isBigEnough(element) &#123; return element &gt;= 10;&#125;var filtered = [12, 5, 8, 130, 44].filter(isBigEnough);// filtered is [12, 130, 44] forEach()//方法让数组的每一项都执行一次给定的函数。//forEach 遍历的范围在第一次调用 callback 前就会确定。调用forEach 后添加到数组中的项不会被 callback 访问到。如果已经存在的值被改变，则传递给 callback 的值是 forEach 遍历到他们那一刻的值。已删除的项不会被遍历到function logArrayElements(element, index, array) &#123; console.log(&quot;a[&quot; + index + &quot;] = &quot; + element);&#125;[2, 5, 9].forEach(logArrayElements);// logs:// a[0] = 2// a[1] = 5// a[2] = 9 every()//callback 被调用时传入三个参数：元素值，元素的索引，原数组。 every 不会改变原数组。//callback 只会为那些已经被赋值的索引调用。不会为那些被删除或从来没被赋值的索引调用//检测数组中的所有元素是否都大于 10function isBigEnough(element, index, array) &#123; return (element &gt;= 10);&#125;var passed = [12, 5, 8, 130, 44].every(isBigEnough);// passed is falsepassed = [12, 54, 18, 130, 44].every(isBigEnough);// passed is true map()//方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。//map 方法会给原数组中的每个元素都按顺序调用一次 callback 函数。callback 每次执行后的返回值组合起来形成一个新数组。 callback 函数只会在有值的索引上被调用；那些从来没被赋过值或者使用 delete 删除的索引则不会被调用。map 不修改调用它的原数组本身（当然可以在 callback 执行时改变原数组）//在一个 String 上使用 map 方法获取字符串中每个字符所对应的 ASCII 码组成的数组：var map = Array.prototype.mapvar a = map.call(&quot;Hello World&quot;, function(x) &#123; return x.charCodeAt(0); &#125;)// a的值为[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100] some()//方法测试数组中的某些元素是否通过了指定函数的测试//描述:some 为数组中的每一个元素执行一次 callback 函数，直到找到一个使得 callback 返回一个“真值”（即可转换为布尔值 true 的值）。如果找到了这样一个值，some 将会立即返回 true。否则，some 返回 false。callback 只会在那些”有值“的索引上被调用，不会在那些被删除或从来未被赋值的索引上调用。//检测在数组中是否有元素大于 10。function isBigEnough(element, index, array) &#123; return (element &gt;= 10);&#125;var passed = [2, 5, 8, 1, 4].some(isBigEnough);// passed is falsepassed = [12, 5, 8, 1, 4].some(isBigEnough);// passed is true reduce()//将数组所有项相加var total = [0, 1, 2, 3].reduce(function(a, b) &#123; return a + b;&#125;);// total == 6// 数组扁平化var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) &#123; return a.concat(b);&#125;);// flattened is [0, 1, 2, 3, 4, 5] js数组其他常用代码对数组重复元素的计数//对数组重复元素的计数function eleCountFromArr(arr)&#123; var newObj = &#123;&#125;; for(var i=0;i&lt;arr.length;i++)&#123; var temp=arr[i]; var count=0; for(var j=0;j&lt;arr.length;j++)&#123; if(arr[j]==temp)&#123; count++; arr[j]=-1; &#125; &#125; if(temp != -1)&#123; newObj[temp]=count; &#125; &#125; return newObj;&#125;//eleCountFromArr([1,2,3,3,4]); //Object &#123;1: 1, 2: 1, 3: 2, 4: 1&#125; 数组中是否有重复值的判断方法function isRepeat(arr)&#123; var hash = &#123;&#125;; for(var i in arr) &#123; if(hash[arr[i]]) return true; hash[arr[i]] = true; &#125; return false; &#125; 数组中是否有重复值的判断方法function uniqueArr(array)&#123; var newArr = []; for(var i = 0, l = array.length; i &lt; l; i++) &#123; for(var j = i + 1; j &lt; l; j++) if (array[i] === array[j]) j = ++i; newArr.push(array[i]); &#125; return newArr;&#125; 一点总结pop,push,reverse,shift,sort,splice,unshift 会改变原数组join,concat,indexOf,lastIndexOf,slice,toString 不会改变原数组map,filter,some,every,reduce,forEach这些迭代方法不会改变原数组几个注意点：shift,pop会返回那个被删除的元素splice 会返回被删除元素组成的数组，或者为空数组push 会返回新数组长度some 在有true的时候停止every 在有false的时候停止上述的迭代方法可以在最后追加一个参数thisArg,它是执行 callback 时的 this 值。JavaScript的数据类型分为：值类型和引用类型(地址值)；而常见的引用类型有Object和Array／数组的存储模型中，如果是诸如Number,String之类的类型数据会被直接压入栈中，而引用类型只会压入对该值的一个索引（即C中所说的保存了数据的指针）。这些数据时储存在堆中的某块区间中，堆栈并不是独立的，栈中也可以在堆中存放。在使用Array的进行赋值操作的时候，也当注意是否要进行深度拷贝复制(可借助arr.slice(0))，以免造成对自身污染。","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"js","slug":"js","permalink":"http://youhanghang.com/tags/js/"},{"name":"数组","slug":"数组","permalink":"http://youhanghang.com/tags/数组/"}]},{"title":"js散记","slug":"js散记","date":"2018-10-29T09:00:12.750Z","updated":"2018-04-17T10:24:30.000Z","comments":true,"path":"2018/10/29/js散记/","link":"","permalink":"http://youhanghang.com/2018/10/29/js散记/","excerpt":"","text":"详解js中对象的深浅拷贝修改js对象属性名称[标题] [] [url] [link text]var a=&#123;&#125;;a.b=1;a.c=a.bdelete a.b//truea.c//1 a=1==1[标题] [] [url] [link text]var a=1==1a// true 递归数组将数组每一项的children 填入新的数组并返回[标题] [] [url] [link text]&lt;!-- 递归数组将数组每一项的children 填入新的数组并返回中对象的children --&gt;&lt;!DOCTYPE &gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; &lt;/style&gt; &lt;/head&gt; &lt;body class=\"easyui-layout\" data-options=\"fit:true\"&gt; &lt;div class=\"div\"&gt;&lt;/div&gt; &lt;/body&gt; &lt;script type=\"text/javascript\"&gt;var array=[&#123; title:\"目录\", children:[&#123; title:\"我的音乐\", children:[&#123; title:\"刘若英\", children:[&#123; title:\"后来\", children:[&#123; title:'1' &#125;,&#123; title:'2' &#125;] &#125;,&#123; title:\"我们没有在一起\" &#125;,&#123; title:\"成全\" &#125;] &#125;,&#123; title:\"周杰伦\" &#125;,&#123; title:\"蔡依林\" &#125;] &#125;,&#123; title:\"我的书籍\", children:[&#123; title:\"javascript\" &#125;,&#123; title:\"html css\" &#125;] &#125; ]&#125;];function render(arr,level)&#123; var level=level||0; level++; var i= 0,len=arr.length; var str=\"&lt;ul&gt;\" for(;i&lt;len;i++)&#123; str+=\"&lt;li&gt;\"+level+\"、\"+arr[i].title; if(arr[i].children&amp;&amp;arr[i].children.length&gt;0)&#123; str+=render(arr[i].children,level); &#125; str+=\"&lt;/li&gt;\"; &#125; str+=\"&lt;/ul&gt;\"; return str;&#125;function getChildrenArr(arr,childrenArr)&#123; var childrenArr=childrenArr||[]; var i= 0,len=arr.length; for(;i&lt;len;i++)&#123; childrenArr.push(arr[i]); if(arr[i].children&amp;&amp;arr[i].children.length&gt;0)&#123; getChildrenArr(arr[i].children,childrenArr); &#125; &#125; return childrenArr;&#125;document.body.innerHTML=render(array);console.log(getChildrenArr(array)); &lt;/script&gt;&lt;/html&gt;","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"js","slug":"js","permalink":"http://youhanghang.com/tags/js/"}]},{"title":"console.log的简单封装","slug":"js打印简单封装","date":"2018-10-29T09:00:12.710Z","updated":"2017-10-15T07:19:04.000Z","comments":true,"path":"2018/10/29/js打印简单封装/","link":"","permalink":"http://youhanghang.com/2018/10/29/js打印简单封装/","excerpt":"","text":"百度搜索console.log[标题] [] [url] [link text]$(function () &#123; $('body').append('&lt;button class=\"refresh-page\" onclick=\" window.location.reload();\" style=\"width:100px;height:100px;position:fixed;right:0;bottom:50%;z-index:99;\"&gt;&lt;a&gt;refresh&lt;/a&gt;&lt;/button&gt;');&#125;)console.clear();function log() &#123; var args = Array.prototype.slice.apply(arguments); if (args.length == 1) &#123; console.log(args[0]); return; &#125; if (args.length == 2) &#123; console.log('%c' + '// ' + args[0], \"color:#7B9B99;\"); console.log(args[1]); &#125; if (args.length == 3) &#123; console.log('%c' + '// ' + args[0], \"color:#7B9B99;\"); console.log(JSON.stringify(args[1])); &#125;&#125;function cLog() &#123; console.clear(); var args = Array.prototype.slice.apply(arguments); if (args.length == 1) &#123; console.log(args[0]); return; &#125; if (args.length == 2) &#123; console.log('%c' + '// ' + args[0], \"color:#7B9B99;\"); console.log(args[1]); &#125; if (args.length == 3) &#123; console.log('%c' + '// ' + args[0], \"color:#7B9B99;\"); console.log(JSON.stringify(args[1])); &#125;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"自己开发","slug":"自己开发","permalink":"http://youhanghang.com/tags/自己开发/"}]},{"title":"js常用函数","slug":"js常用函数","date":"2018-10-29T09:00:12.680Z","updated":"2018-03-22T08:15:16.000Z","comments":true,"path":"2018/10/29/js常用函数/","link":"","permalink":"http://youhanghang.com/2018/10/29/js常用函数/","excerpt":"","text":"js常用函数[标题] [] [url] [link text] 函数队列[标题] [] [url] [link text]//关于实现函数按一定顺序调用的例子 传入多个参数累加[标题] [] [url] [link text]//function add()&#123; var newArr = Array.prototype.reduce.call(arguments, function(a,b)&#123; return a+b; &#125;); console.log(newArr);&#125;//add(1,3);3//add(1,2,3);6 解析url[标题] [] [url] [link text](function()&#123; var url = window.location; var search = url.search; var query = &#123;&#125;; var searchArr = search.slice(1, search.length).split('&amp;'); for(var i = 0;i&lt;searchArr.length;i++)&#123; var tempArr = searchArr[i].split('='); if(typeof query[tempArr[0]] == \"undefined\")&#123; query[tempArr[0]] = tempArr[1]; &#125; &#125; return &#123; href : url.protocol, protocol : url.protocol, host : url.host, port : url.port, pathname : url.pathname, origin : url.origin, hostname : url.hostname, hash : url.hash, query : query &#125;&#125;)() js产生随机数[标题] [] [url] [link text]//产生随机数function randomNum(minNum,maxNum)&#123; switch(arguments.length)&#123; case 1: return parseInt(Math.random()*minNum+1,10); break; case 2: return parseInt(Math.random()*(maxNum-minNum+1)+minNum,10); break; default: return 0; break; &#125; &#125; 强制保留2位小数[标题] [] [url] [link text]//强制保留2位小数,不进行四舍五入,如：2，会在2后面补上00.即2.00 function toDecimal2(num) &#123; var floatNum = parseFloat(num); if (isNaN(floatNum)) &#123; return false; &#125; //不进行四舍五入 var floatNumStr = Math.floor(floatNum * 100) / 100+''; var rs = floatNumStr.indexOf('.'); if (rs &lt; 0) &#123; rs = floatNumStr.length; floatNumStr += '.'; &#125; while (floatNumStr.length &lt;= rs + 2) &#123; floatNumStr += '0'; &#125; return floatNumStr; &#125; 采用正则表达式获取地址栏参数[标题] [] [url] [link text]//采用正则表达式获取地址栏参数function GetQueryString(name)&#123; var reg = new RegExp(\"(^|&amp;)\"+ name +\"=([^&amp;]*)(&amp;|$)\"); var r = window.location.search.substr(1).match(reg); if(r!=null)return unescape(r[2]); return null;&#125; // 调用方法alert(GetQueryString(\"参数名1\"));alert(GetQueryString(\"参数名2\"));alert(GetQueryString(\"参数名3\")); 获得唯一id[标题] [] [url] [link text]function getUniqueId() &#123; return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) &#123; var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r &amp; 0x3 | 0x8); return v.toString(16).toUpperCase(); &#125;);&#125; 立即执行函数，for循环执行的setTimeout[标题] [] [url] [link text]var a=0;for(var i=0;i&lt;10;i++)&#123; setTimeout(function()&#123; console.log(a++)&#125;,1)&#125; for (var i = 0; i &lt; 5; i++) &#123; (function(i)&#123; //立刻执行函数 setTimeout(function ()&#123; console.log(i); &#125;,1000); &#125;)(i); &#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"js","slug":"js","permalink":"http://youhanghang.com/tags/js/"}]},{"title":"js字符串常用函数","slug":"js字符串常用方法","date":"2018-10-29T09:00:12.650Z","updated":"2017-12-14T06:47:10.000Z","comments":true,"path":"2018/10/29/js字符串常用方法/","link":"","permalink":"http://youhanghang.com/2018/10/29/js字符串常用方法/","excerpt":"","text":"js字符串常用函数[标题] [] [url] [link text] [标题] [] [url] [link text]//强制保留2位小数不,进行四舍五入,如：2，会在2后面补上00.即2.00 产生随机数 function toDecimal2(num) &#123; var floatNum = parseFloat(num); if (isNaN(floatNum)) &#123; return false; &#125; //不进行四舍五入 var floatNumStr = Math.floor(floatNum * 100) / 100+''; var rs = floatNumStr.indexOf('.'); if (rs &lt; 0) &#123; rs = floatNumStr.length; floatNumStr += '.'; &#125; while (floatNumStr.length &lt;= rs + 2) &#123; floatNumStr += '0'; &#125; return floatNumStr; &#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"js","slug":"js","permalink":"http://youhanghang.com/tags/js/"},{"name":"字符串","slug":"字符串","permalink":"http://youhanghang.com/tags/字符串/"}]},{"title":"js兼容问题处理","slug":"js兼容","date":"2018-10-29T09:00:12.620Z","updated":"2018-04-17T09:41:00.000Z","comments":true,"path":"2018/10/29/js兼容/","link":"","permalink":"http://youhanghang.com/2018/10/29/js兼容/","excerpt":"","text":"百度搜索js兼容 谈谈JS中常遇到的浏览器兼容问题和解决方法 常遇到的关于浏览器的宽高问题： event事件问题 DOM节点相关的问题 JS中出现的兼容性问题 关于获取行外样式 currentStyle 和 getComputedStyle 出现的兼容性问题 关于用“索引”获取字符串每一项出现的兼容性问题:兼容方法:str.charAt(i) 关于使用 firstChild,lastChild 等，获取第一个/最后一个元素节点时产生的问题 关于获取滚动条距离而出现的问题 JavaScript中解决多浏览器兼容性23个问题的快速解决方法 关于获取行外样式 currentStyle 和 getComputedStyle 出现的兼容性问题 关于用“索引”获取字符串每一项出现的兼容性问题:兼容方法:str.charAt(i) 关于使用 firstChild,lastChild 等，获取第一个/最后一个元素节点时产生的问题 关于获取滚动条距离而出现的问题 跨浏览器的事件对象 监听事件，移除监听事件 获取事件event对象 获取触发事件的节点 阻止默认事件 阻止事件冒泡[标题] [] [url] [link text]var EventUtil = &#123; addHandler: function(element, type, handler)&#123; if (element.addEventListener)&#123; element.addEventListener(type, handler, false); &#125; else if (element.attachEvent)&#123; element.attachEvent(\"on\" + type, handler); &#125; else &#123; element[\"on\" + type] = handler; &#125; &#125;, getButton: function(event)&#123; if (document.implementation.hasFeature(\"MouseEvents\", \"2.0\"))&#123; return event.button; &#125; else &#123; switch(event.button)&#123; case 0: case 1: case 3: case 5: case 7: return 0; case 2: case 6: return 2; case 4: return 1; &#125; &#125; &#125;, getCharCode: function(event)&#123; if (typeof event.charCode == \"number\")&#123; return event.charCode; &#125; else &#123; return event.keyCode; &#125; &#125;, getClipboardText: function(event)&#123; var clipboardData = (event.clipboardData || window.clipboardData); return clipboardData.getData(\"text\"); &#125;, getEvent: function(event)&#123; return event ? event : window.event; &#125;, getRelatedTarget: function(event)&#123; if (event.relatedTarget)&#123; return event.relatedTarget; &#125; else if (event.toElement)&#123; return event.toElement; &#125; else if (event.fromElement)&#123; return event.fromElement; &#125; else &#123; return null; &#125; &#125;, getTarget: function(event)&#123; return event.target || event.srcElement; &#125;, getWheelDelta: function(event)&#123; if (event.wheelDelta)&#123; return (client.engine.opera &amp;&amp; client.engine.opera &lt; 9.5 ? -event.wheelDelta : event.wheelDelta); &#125; else &#123; return -event.detail * 40; &#125; &#125;, preventDefault: function(event)&#123; if (event.preventDefault)&#123; event.preventDefault(); &#125; else &#123; event.returnValue = false; &#125; &#125;, removeHandler: function(element, type, handler)&#123; if (element.removeEventListener)&#123; element.removeEventListener(type, handler, false); &#125; else if (element.detachEvent)&#123; element.detachEvent(\"on\" + type, handler); &#125; else &#123; element[\"on\" + type] = null; &#125; &#125;, setClipboardText: function(event, value)&#123; if (event.clipboardData)&#123; event.clipboardData.setData(\"text/plain\", value); &#125; else if (window.clipboardData)&#123; window.clipboardData.setData(\"text\", value); &#125; &#125;, stopPropagation: function(event)&#123; if (event.stopPropagation)&#123; event.stopPropagation(); &#125; else &#123; event.cancelBubble = true; &#125; &#125;&#125;;","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"js","slug":"js","permalink":"http://youhanghang.com/tags/js/"},{"name":"兼容","slug":"兼容","permalink":"http://youhanghang.com/tags/兼容/"}]},{"title":"jsCookie","slug":"jsCookie","date":"2018-10-29T09:00:12.590Z","updated":"2018-03-22T06:43:08.000Z","comments":true,"path":"2018/10/29/jsCookie/","link":"","permalink":"http://youhanghang.com/2018/10/29/jsCookie/","excerpt":"","text":"百度搜索jsCookie 清除cookie[标题] [] [url] [link text]function clearAllCookie() &#123; var keys = document.cookie.match(/[^ =;]+(?=\\=)/g); if(keys) &#123; for(var i = keys.length; i--;) document.cookie = keys[i] + '=0;expires=' + new Date(0).toUTCString() &#125; &#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"jsCookie","slug":"jsCookie","permalink":"http://youhanghang.com/tags/jsCookie/"}]},{"title":"jquery插件开发","slug":"jquery插件开发","date":"2018-10-29T09:00:12.570Z","updated":"2018-10-29T07:44:46.000Z","comments":true,"path":"2018/10/29/jquery插件开发/","link":"","permalink":"http://youhanghang.com/2018/10/29/jquery插件开发/","excerpt":"","text":"百度搜索jquery插件jquery插件开发的一般写法[] [] [url] [link text] 获取本地配置信息的插件,需要服务的方式访问和请求文件内容[] [] [url] [link text] 获取本地配置信息的插件,需要服务的方式访问和请求文件内容[] [] [url] [link text] 获取本地配置信息的插件,需要服务的方式访问和请求文件内容[标题] [] [url] [link text] /** * 自定义插件 */ $.extend(&#123; /** * 解析.propertie文件 * 根据key获取value * 示例$.getPropertie(&#123; * url:\"javascript/Custom/action/js/main/cache/config.properties\", * key:\"UIPlugins\", * success:function(data)&#123; * console.log(data); * &#125; * &#125;) */ getPropertie: function(options) &#123; var defaults = &#123; url: \"\", //文件请求路径 key: \"\", success: function(data) &#123; &#125; &#125;, options = $.extend(defaults, options); //工具方法 var utils = &#123; getPropertie: function(data, key) &#123; //解析.properties var records = data.split(\"=\"), info, flag = false; for (var i = 0, j = records.length; i &lt; j; i++) &#123; if (records[i].indexOf(key) &gt;= 0) &#123; var value = records[i + 1]; if (value.indexOf(\"#\") &gt;= 0) &#123; var _value = value.split(\"#\"); info = _value[0]; flag = true; break; &#125; else &#123; info = value; flag = true; break; &#125; &#125; &#125; if (!flag) &#123; console.error(\"error:未找到Key:\" + key); &#125; return info; &#125; &#125; //加载配置 $.ajax(&#123; url: options.url == null &amp;&amp; options.url.length == 0 ? console.error(\"error:url不能为空\") : options.url, dataType: \"text\", type: \"GET\", contentType: \"application/text\", async: false, timeout: 5000, // 设置请求超时时间（毫秒）。 success: function(data) &#123; if (data.length != 0) &#123; var retData; if (options.key != null &amp;&amp; options.key.length != 0) &#123; retData = utils.getPropertie(data, options.key); if (typeof options.success == \"function\") &#123; options.success(retData); &#125; &#125; &#125; else &#123; console.error(\"error:获取配置文件中key值:\" + options.key + \"失败\"); &#125; &#125;, error: function(jqXHR, textStatus, errorThrown) &#123; if (textStatus == \"timeout\") &#123; result = \"timeout\"; &#125; &#125; &#125;); &#125;, //获取json对象长度 getJSONLength: function(data) &#123; var length = 0; for (key in data) &#123; length += 1; &#125; return length; &#125; &#125;)//调用方法 $.getPropertie(&#123; url: \"config.properties\", key: \"UIPlugins\", success: function(data) &#123; console.log(data); &#125; &#125;) $.getPropertie(&#123; url: \"配置.txt\", key: \"UIPlugins\", success: function(data) &#123; console.log(data); &#125; &#125;) [配置.txt] [] [url] [link text]#需要进行数据缓存的交易组件UIPlugins=input,select,textarea,lalala#菜单项路径MenuPath=D:/menu.txt#数据字典路径IFFieldPath=D:/field.txt#交易访问路径TradesUrl=http://20.200.42.142:7878/etp-service/","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"jquery插件","slug":"jquery插件","permalink":"http://youhanghang.com/tags/jquery插件/"}]},{"title":"jquery技巧篇","slug":"jquery技巧篇","date":"2018-10-29T09:00:12.540Z","updated":"2017-11-10T06:35:50.000Z","comments":true,"path":"2018/10/29/jquery技巧篇/","link":"","permalink":"http://youhanghang.com/2018/10/29/jquery技巧篇/","excerpt":"","text":"转载自https://yusi123.com/3105.html百度搜索jquery技巧篇jQuery代码开发技巧收集 重用你的元素查询// id最快，其次是标签var allItems = $(&quot;li.item&quot;); 使用jQuery切换样式文件$(&apos;link[media=&apos;screen&apos;]&apos;).attr(&apos;href&apos;, &apos;Alternative.css&apos;); 正确使用ToggleClass//class. Where some developers would use: a.hasClass(&apos;blueButton&apos;) ? a.removeClass(&apos;blueButton&apos;) : a.addClass(&apos;blueButton&apos;); //简单实现a.toggleClass(&apos;blueButton&apos;); 创建一个嵌套的过滤器//判断浏览器类型：$.browser.mozilla = /firefox/.test(navigator.userAgent.toLowerCase());$.browser.webkit = /webkit/.test(navigator.userAgent.toLowerCase());$.browser.opera = /opera/.test(navigator.userAgent.toLowerCase());$.browser.msie = /msie/.test(navigator.userAgent.toLowerCase());//等号后面的表达式返回的就是 true/false， 可以直接用来替换原来的 //检查是否为 IE6：if (&apos;undefined&apos; == typeof(document.body.style.maxHeight)) &#123;&#125;//检查是否为 IE 6-8：if (!$.support.leadingWhitespace) &#123;&#125; 使用jQuery来替换一个元素&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;inner first&quot;&gt;Hello&lt;/div&gt; &lt;div class=&quot;inner second&quot;&gt;And&lt;/div&gt; &lt;div class=&quot;inner third&quot;&gt;Goodbye&lt;/div&gt;&lt;/div&gt;$(&apos;.third&apos;).replaceWith($(&apos;.first&apos;)); 验证一个元素是否为空if ($(&apos;#keks&apos;).html()) &#123; //Nothing found ;&#125; 在无序的set中查找一个元素的索引$(&quot;ul &gt; li&quot;).click(function () &#123; var index = $(this).prevAll().length; &#125;); 创建元素时使用对象来定义属性var e = $(&quot;&quot;, &#123; href: &quot;#&quot;, class: &quot;a-class another-class&quot;, title: &quot;...&quot; &#125;); 使用jQuery预加载图片jQuery.preloadImages = function() &#123; for(var i = 0; i&apos;).attr(&apos;src&apos;, arguments[i]); &#125; &#125;; // Usage $.preloadImages(&apos;image1.gif&apos;, &apos;/path/to/image2.png&apos;, &apos;some/image3.jpg&apos;); 隐藏包含特定值的元素$(&quot;p.value:contains(&apos;thetextvalue&apos;)&quot;).hide(); 自动的滚动到页面特定区域jQuery.fn.autoscroll = function(selector) &#123; $(&apos;html,body&apos;).animate( &#123;scrollTop: $(selector).offset().top&#125;, 500 );&#125;//Then to scroll to the class/area you wish to get to like this:$(&apos;.area_name&apos;).autoscroll(); 替换字符串中的单词var el = $(&apos;#id&apos;);el.html(el.html().replace(/word/ig, &apos;&apos;)); 关闭右键的菜单$(document).bind(&apos;contextmenu&apos;,function(e)&#123; return false; &#125;); 剔除元素中的HTML(function($) &#123; $.fn.stripHtml = function() &#123; var regexp = /&amp;lt;(&quot;[^&quot;]*&quot;|&apos;[^&apos;]*&apos;|[^&apos;&quot;&amp;gt;])*&amp;gt;/gi; this.each(function() &#123; $(this).html( $(this).html().replace(regexp,&quot;&quot;) ); &#125;); return $(this); &#125;&#125;)(jQuery);//usage:$(&apos;p&apos;).stripHtml(); 使用closest来得到父元素$(&apos;#searchBox&apos;).closest(&apos;div&apos;); 选择或者不选页面上全部复选框var tog = false; // or true if they are checked on load$(&apos;a&apos;).click(function() &#123; $(&quot;input[type=checkbox]&quot;).attr(&quot;checked&quot;,!tog); tog = !tog;&#125;); 取得鼠标的X和Y坐标 $(document).mousemove(function(e)&#123; $(document).ready(function() &#123; $().mousemove(function(e)&#123; $(&apos;#XY&apos;).html(&quot;Gbin1 X Axis : &quot; + e.pageX + &quot; | Gbin1 Y Axis &quot; + e.pageY); &#125;);&#125;); 使得整个列表元素(LI)可点击$(&quot;ul li&quot;).click(function()&#123; window.location=$(this).find(&quot;a&quot;).attr(&quot;href&quot;); return false;&#125;); 使用jQuery来解析XMLfunction parseXml(xml) &#123; //find every Tutorial and print the author $(xml).find(&quot;Tutorial&quot;).each(function() &#123; $(&quot;#output&quot;).append($(this).attr(&quot;author&quot;) + &quot;&quot;); &#125;);&#125; 判断一个图片是否加载完全$(&apos;#theGBin1Image&apos;).attr(&apos;src&apos;, &apos;image.jpg&apos;).load(function() &#123; alert(&apos;This Image Has Been Loaded&apos;);&#125;); 在表单中禁用“回车键”$(&quot;#form&quot;).keypress(function(e) &#123; if (e.which == 13) &#123; return false; &#125;&#125;); 清除所有的表单数据function clearForm(form) &#123; // iterate over all of the inputs for the form // element that was passed in $(&apos;:input&apos;, form).each(function() &#123; var type = this.type; var tag = this.tagName.toLowerCase(); // normalize case // it&apos;s ok to reset the value attr of text inputs, // password inputs, and textareas if (type == &apos;text&apos; || type == &apos;password&apos; || tag == &apos;textarea&apos;) this.value = &quot;&quot;; // checkboxes and radios need to have their checked state cleared // but should *not* have their &apos;value&apos; changed else if (type == &apos;checkbox&apos; || type == &apos;radio&apos;) this.checked = false; // select elements need to have their &apos;selectedIndex&apos; property set to -1 // (this works for both single and multiple select elements) else if (tag == &apos;select&apos;) this.selectedIndex = -1; &#125;);&#125;; 将表单中的按钮禁用//下面的代码对于ajax操作非常有用，你可以有效的避免用户多次提交数据，个人也经常使用：//禁用按钮：$(&quot;#somebutton&quot;).attr(&quot;disabled&quot;, true);启动按钮：$(&quot;#submit-button&quot;).removeAttr(&quot;disabled&quot;);//可能大家往往会使用.attr(‘disabled’,false);，不过这是不正确的调用。 输入内容后启用递交按钮//这个代码和上面类似，都属于帮助用户控制表单递交按钮。使用这段代码后，递交按钮只有在用户输入指定内容后才可以启动。$(&apos;#username&apos;).keyup(function() &#123; $(&apos;#submit&apos;).attr(&apos;disabled&apos;, !$(&apos;#username&apos;).val()); &#125;); 禁止多次递交表单$(document).ready(function() &#123; $(&apos;form&apos;).submit(function() &#123; if(typeof jQuery.data(this, &quot;disabledOnSubmit&quot;) == &apos;undefined&apos;) &#123; jQuery.data(this, &quot;disabledOnSubmit&quot;, &#123; submited: true &#125;); $(&apos;input[type=submit], input[type=button]&apos;, this).each(function() &#123; $(this).attr(&quot;disabled&quot;, &quot;disabled&quot;); &#125;); return true; &#125; else &#123; return false; &#125; &#125;);&#125;); 高亮显示目前聚焦的输入框标示//有时候你需要提示用户目前操作的输入框，你可以使用下面代码高亮显示标示：$(&quot;form :input&quot;).focus(function() &#123; $(&quot;label[for=&apos;&quot; + this.id + &quot;&apos;]&quot;).addClass(&quot;labelfocus&quot;);&#125;).blur(function() &#123; $(&quot;label&quot;).removeClass(&quot;labelfocus&quot;);&#125;); 自动将数据导入selectbox中//下面代码能够使用ajax数据自动生成选择框的内容$(function()&#123; $(&quot;select#ctlJob&quot;).change(function()&#123; $.getJSON(&quot;/select.php&quot;,&#123;id: $(this).val(), ajax: &apos;true&apos;&#125;, function(j)&#123; var options = &apos;&apos;; for (var i = 0; i &lt; j.length; i++) &#123; options += &apos;&lt;option value=&quot;&apos; + j[i].optionValue + &apos;&quot;&gt;&apos; + j[i].optionDisplay + &apos;&lt;/option&gt;&apos;; &#125; $(&quot;select#ctlPerson&quot;).html(options); &#125;) &#125;)&#125;)","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"jquery","slug":"jquery","permalink":"http://youhanghang.com/tags/jquery/"}]},{"title":"flex布局学习","slug":"flex学习","date":"2018-10-29T09:00:12.510Z","updated":"2018-03-22T08:12:28.000Z","comments":true,"path":"2018/10/29/flex学习/","link":"","permalink":"http://youhanghang.com/2018/10/29/flex学习/","excerpt":"","text":"百度搜索flex布局学习flex骰子布局flex语法教程","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"css","slug":"css","permalink":"http://youhanghang.com/tags/css/"}]},{"title":"css注释模板","slug":"css注释模板","date":"2018-10-29T09:00:12.480Z","updated":"2017-11-11T09:56:12.000Z","comments":true,"path":"2018/10/29/css注释模板/","link":"","permalink":"http://youhanghang.com/2018/10/29/css注释模板/","excerpt":"","text":"css注释模板[]/*reset.css 开始*//*reset.css 结束*//* 常用css 开始*/.a-center&#123;position: absolute;margin: auto;left: 0;right:0;top:0;bottom: 0;&#125;.bg-black&#123;position: relative;z-index:1 ;&#125;.bg-black:after&#123;content:'';position: absolute;left:0;right:0;width: 100%;height: 100%;background: rgba(0, 0, 0,.5);z-index: -1;&#125;/* 常用css 结束*//*公共样式 开始*//*公共样式 结束*//*header 开始*//*header 结束*//* 开始*//* 结束*//*footer 开始*//*footer 结束*//*Common For Max 960*/@media only screen and (max-width: 1199px) &#123;&#125;/*Common For Max 768*/@media only screen and (max-width: 992px) &#123;&#125;@media only screen and (max-width: 767px) &#123;&#125;/*Common For Max 414*/@media only screen and (max-width: 479px) &#123;&#125;/*Common For Max 375*/@media only screen and (max-width: 413px) &#123;&#125;/*Common For Max 320*/@media only screen and (max-width: 320px) &#123;&#125;/* --------------------------- 固定屏幕样式 ---------------------------------------- *//*960~1199*/@media only screen and (min-width: 960px) and (max-width: 1199px) &#123;&#125;/*768~959*/@media only screen and (min-width: 768px) and (max-width: 959px) &#123;&#125;/*480~767*/@media only screen and (min-width: 480px) and (max-width: 767px) &#123;&#125;/*320~479*/@media only screen and (min-width: 320px) and (max-width: 479px) &#123;&#125;/*240~319*/@media only screen and (max-width: 319px) &#123;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"css","slug":"css","permalink":"http://youhanghang.com/tags/css/"}]},{"title":"css兼容问题","slug":"css兼容","date":"2018-10-29T09:00:12.460Z","updated":"2018-04-30T06:33:22.000Z","comments":true,"path":"2018/10/29/css兼容/","link":"","permalink":"http://youhanghang.com/2018/10/29/css兼容/","excerpt":"","text":"目前比较全面的浏览器CSS BUG兼容汇总 1.div的垂直居中问题 margin加倍的问题 3.浮动ie产生的双倍距离 4 IE与宽度和高度的问题 5.页面的最小宽度 6.DIV浮动IE文本产生3象素的bug 7.IE捉迷藏的问题 8.float的div闭合;清除浮动;自适应高度;&lt;!– &gt; * 9.对于排版 10.万能float 闭合(非常重要!) 11.高度不适应 12 .IE6下为什么图片下有空隙产生 13.如何对齐文本与文本输入框 14.web标准中定义id与class有什么区别吗? LI中内容超过长度后以省略号显示的方法 16.为什么web标准中IE无法设置滚动条颜色了 17.为什么无法定义1px左右高度的容器 18.怎么样才能让层显示在FLASH之上呢 19.怎样使一个层垂直居中于浏览器中 Div居中问题 2.链接(a标签)的边框与背景 3.超链接访问过后hover样式就不出现的问题 游标手指cursor 5.UL的padding与margin FORM标签 BOX模型解释不一致问题 8.属性选择器(这个不能算是兼容,是隐藏css的一个bug) 9.最狠的手段 - !important; 10.IE,FF的默认值问题 11.为什么FF下文本无法撑开容器的高度 12.FireFox下如何使连续长字段自动换行 13.为什么IE6下容器的宽度和FF解释不同呢 三个浏览器的兼容性 第一种，是CSS HACK的方法 第二种,条件注释 第三种，css filter的办法，以下为经典从国外网站翻译过来的。 –&gt;","categories":[{"name":"前端","slug":"前端","permalink":"http://youhanghang.com/categories/前端/"}],"tags":[{"name":"css","slug":"css","permalink":"http://youhanghang.com/tags/css/"}]}]}